#pragma once
#include <wx/wx.h>

extern "C" {

// CLASS: wxObject
void *wxObject_new();
void *wxObject_new1(void * other);
void * wxObject_GetClassInfo(const void * self);
void * wxObject_GetRefData(const void * self);
bool wxObject_IsKindOf(const void * self, void * info);
bool wxObject_IsSameAs(const void * self, void * obj);
void wxObject_Ref(void * self, void * clone);
void wxObject_SetRefData(void * self, void * data);
void wxObject_UnRef(void * self);
void wxObject_UnShare(void * self);

// CLASS: wxEvtHandler
void wxEvtHandler_QueueEvent(void * self, void * event);
void wxEvtHandler_AddPendingEvent(void * self, void * event);
bool wxEvtHandler_ProcessEvent(void * self, void * event);
bool wxEvtHandler_ProcessEventLocally(void * self, void * event);
bool wxEvtHandler_SafelyProcessEvent(void * self, void * event);
void wxEvtHandler_ProcessPendingEvents(void * self);
void wxEvtHandler_DeletePendingEvents(void * self);
void * wxEvtHandler_GetClientObject(const void * self);
void wxEvtHandler_SetClientObject(void * self, void * data);
bool wxEvtHandler_GetEvtHandlerEnabled(const void * self);
void * wxEvtHandler_GetNextHandler(const void * self);
void * wxEvtHandler_GetPreviousHandler(const void * self);
void wxEvtHandler_SetEvtHandlerEnabled(void * self, bool enabled);
void wxEvtHandler_SetNextHandler(void * self, void * handler);
void wxEvtHandler_SetPreviousHandler(void * self, void * handler);
void wxEvtHandler_Unlink(void * self);
bool wxEvtHandler_IsUnlinked(const void * self);
void wxEvtHandler_AddFilter(void * filter);
void wxEvtHandler_RemoveFilter(void * filter);
void *wxEvtHandler_new();

// CLASS: wxWindow
bool wxWindow_AcceptsFocus(const void * self);
bool wxWindow_AcceptsFocusFromKeyboard(const void * self);
bool wxWindow_AcceptsFocusRecursively(const void * self);
void wxWindow_DisableFocusFromKeyboard(void * self);
bool wxWindow_IsFocusable(const void * self);
bool wxWindow_CanAcceptFocus(const void * self);
bool wxWindow_CanAcceptFocusFromKeyboard(const void * self);
bool wxWindow_HasFocus(const void * self);
void wxWindow_SetCanFocus(void * self, bool can_focus);
void wxWindow_EnableVisibleFocus(void * self, bool enable);
void wxWindow_SetFocus(void * self);
void wxWindow_SetFocusFromKbd(void * self);
void wxWindow_AddChild(void * self, void * child);
bool wxWindow_DestroyChildren(void * self);
void * wxWindow_FindWindow(const void * self, int32_t id);
void * wxWindow_FindWindow1(const void * self, void * name);
void wxWindow_RemoveChild(void * self, void * child);
void * wxWindow_GetGrandParent(const void * self);
void * wxWindow_GetNextSibling(const void * self);
void * wxWindow_GetParent(const void * self);
void * wxWindow_GetPrevSibling(const void * self);
bool wxWindow_IsDescendant(const void * self, void * win);
bool wxWindow_Reparent(void * self, void * new_parent);
void wxWindow_AlwaysShowScrollbars(void * self, bool hflag, bool vflag);
int wxWindow_GetScrollPos(const void * self, int orientation);
int wxWindow_GetScrollRange(const void * self, int orientation);
int wxWindow_GetScrollThumb(const void * self, int orientation);
bool wxWindow_CanScroll(const void * self, int orient);
bool wxWindow_HasScrollbar(const void * self, int orient);
bool wxWindow_IsScrollbarAlwaysShown(const void * self, int orient);
bool wxWindow_ScrollLines(void * self, int lines);
bool wxWindow_ScrollPages(void * self, int pages);
void wxWindow_ScrollWindow(void * self, int dx, int dy, void * rect);
bool wxWindow_LineUp(void * self);
bool wxWindow_LineDown(void * self);
bool wxWindow_PageUp(void * self);
bool wxWindow_PageDown(void * self);
void wxWindow_SetScrollPos(void * self, int orientation, int pos, bool refresh);
void wxWindow_SetScrollbar(void * self, int orientation, int position, int thumb_size, int range, bool refresh);
bool wxWindow_BeginRepositioningChildren(void * self);
void wxWindow_EndRepositioningChildren(void * self);
void wxWindow_CacheBestSize(const void * self, void * size);
void *wxWindow_ClientToWindowSize(const void * self, void * size);
void *wxWindow_WindowToClientSize(const void * self, void * size);
void wxWindow_Fit(void * self);
void wxWindow_FitInside(void * self);
void *wxWindow_FromDIP(const void * self, void * sz);
void *wxWindow_FromDIP1(const void * self, void * pt);
int wxWindow_FromDIP2(const void * self, int d);
void *wxWindow_ToDIP(const void * self, void * sz);
void *wxWindow_ToDIP1(const void * self, void * pt);
int wxWindow_ToDIP2(const void * self, int d);
void *wxWindow_GetBestSize(const void * self);
int wxWindow_GetBestHeight(const void * self, int width);
int wxWindow_GetBestWidth(const void * self, int height);
void wxWindow_GetClientSize(const void * self, void * width, void * height);
void *wxWindow_GetClientSize1(const void * self);
void *wxWindow_GetEffectiveMinSize(const void * self);
void *wxWindow_GetMaxClientSize(const void * self);
void *wxWindow_GetMaxSize(const void * self);
void *wxWindow_GetMinClientSize(const void * self);
void *wxWindow_GetMinSize(const void * self);
int wxWindow_GetMinWidth(const void * self);
int wxWindow_GetMinHeight(const void * self);
int wxWindow_GetMaxWidth(const void * self);
int wxWindow_GetMaxHeight(const void * self);
void wxWindow_GetSize(const void * self, void * width, void * height);
void *wxWindow_GetSize1(const void * self);
void *wxWindow_GetVirtualSize(const void * self);
void wxWindow_GetVirtualSize1(const void * self, void * width, void * height);
void *wxWindow_GetBestVirtualSize(const void * self);
double wxWindow_GetContentScaleFactor(const void * self);
double wxWindow_GetDPIScaleFactor(const void * self);
void *wxWindow_GetWindowBorderSize(const void * self);
bool wxWindow_InformFirstDirection(void * self, int direction, int size, int available_other_dir);
void wxWindow_InvalidateBestSize(void * self);
void wxWindow_PostSizeEvent(void * self);
void wxWindow_PostSizeEventToParent(void * self);
void wxWindow_SendSizeEvent(void * self, int flags);
void wxWindow_SendSizeEventToParent(void * self, int flags);
void wxWindow_SetClientSize(void * self, int width, int height);
void wxWindow_SetClientSize1(void * self, void * size);
void wxWindow_SetClientSize2(void * self, void * rect);
void wxWindow_SetContainingSizer(void * self, void * sizer);
void wxWindow_SetInitialSize(void * self, void * size);
void wxWindow_SetMaxClientSize(void * self, void * size);
void wxWindow_SetMaxSize(void * self, void * size);
void wxWindow_SetMinClientSize(void * self, void * size);
void wxWindow_SetMinSize(void * self, void * size);
void wxWindow_SetSize(void * self, int x, int y, int width, int height, int size_flags);
void wxWindow_SetSize1(void * self, void * rect);
void wxWindow_SetSize2(void * self, void * size);
void wxWindow_SetSize3(void * self, int width, int height);
void wxWindow_SetSizeHints(void * self, void * min_size, void * max_size, void * inc_size);
void wxWindow_SetSizeHints1(void * self, int min_w, int min_h, int max_w, int max_h, int inc_w, int inc_h);
void wxWindow_SetVirtualSize(void * self, int width, int height);
void wxWindow_SetVirtualSize1(void * self, void * size);
void *wxWindow_FromDIP3(void * sz, void * w);
void *wxWindow_FromDIP4(void * pt, void * w);
int wxWindow_FromDIP5(int d, void * w);
void *wxWindow_ToDIP3(void * sz, void * w);
void *wxWindow_ToDIP4(void * pt, void * w);
int wxWindow_ToDIP5(int d, void * w);
void wxWindow_Center(void * self, int dir);
void wxWindow_CenterOnParent(void * self, int dir);
void wxWindow_Centre(void * self, int direction);
void wxWindow_CentreOnParent(void * self, int direction);
void wxWindow_GetPosition(const void * self, void * x, void * y);
void *wxWindow_GetPosition1(const void * self);
void *wxWindow_GetRect(const void * self);
void wxWindow_GetScreenPosition(const void * self, void * x, void * y);
void *wxWindow_GetScreenPosition1(const void * self);
void *wxWindow_GetScreenRect(const void * self);
void *wxWindow_GetClientAreaOrigin(const void * self);
void *wxWindow_GetClientRect(const void * self);
void wxWindow_Move(void * self, int x, int y, int flags);
void wxWindow_Move1(void * self, void * pt, int flags);
void wxWindow_SetPosition(void * self, void * pt);
void wxWindow_ClientToScreen(const void * self, void * x, void * y);
void *wxWindow_ClientToScreen1(const void * self, void * pt);
void *wxWindow_ConvertDialogToPixels(const void * self, void * pt);
void *wxWindow_ConvertDialogToPixels1(const void * self, void * sz);
void *wxWindow_ConvertPixelsToDialog(const void * self, void * pt);
void *wxWindow_ConvertPixelsToDialog1(const void * self, void * sz);
void wxWindow_ScreenToClient(const void * self, void * x, void * y);
void *wxWindow_ScreenToClient1(const void * self, void * pt);
void wxWindow_ClearBackground(void * self);
void wxWindow_Freeze(void * self);
void wxWindow_Thaw(void * self);
bool wxWindow_IsFrozen(const void * self);
int wxWindow_GetCharHeight(const void * self);
int wxWindow_GetCharWidth(const void * self);
void *wxWindow_GetDPI(const void * self);
void wxWindow_GetTextExtent(const void * self, void * string, void * w, void * h, void * descent, void * external_leading, void * font);
void *wxWindow_GetTextExtent1(const void * self, void * string);
void *wxWindow_GetUpdateClientRect(const void * self);
bool wxWindow_HasTransparentBackground(void * self);
void wxWindow_Refresh(void * self, bool erase_background, void * rect);
void wxWindow_RefreshRect(void * self, void * rect, bool erase_background);
void wxWindow_Update(void * self);
bool wxWindow_SetBackgroundColour(void * self, void * colour);
bool wxWindow_IsTransparentBackgroundSupported(const void * self, void * reason);
bool wxWindow_SetFont(void * self, void * font);
bool wxWindow_SetForegroundColour(void * self, void * colour);
void wxWindow_SetOwnBackgroundColour(void * self, void * colour);
bool wxWindow_InheritsBackgroundColour(const void * self);
bool wxWindow_UseBgCol(const void * self);
bool wxWindow_UseBackgroundColour(const void * self);
void wxWindow_SetOwnFont(void * self, void * font);
void wxWindow_SetOwnForegroundColour(void * self, void * colour);
bool wxWindow_UseForegroundColour(const void * self);
bool wxWindow_InheritsForegroundColour(const void * self);
void wxWindow_SetPalette(void * self, void * pal);
bool wxWindow_ShouldInheritColours(const void * self);
void wxWindow_SetThemeEnabled(void * self, bool enable);
bool wxWindow_GetThemeEnabled(const void * self);
bool wxWindow_CanSetTransparent(void * self);
bool wxWindow_SetTransparent(void * self, wxByte alpha);
void * wxWindow_GetEventHandler(const void * self);
bool wxWindow_HandleAsNavigationKey(void * self, void * event);
bool wxWindow_HandleWindowEvent(const void * self, void * event);
bool wxWindow_ProcessWindowEvent(void * self, void * event);
bool wxWindow_ProcessWindowEventLocally(void * self, void * event);
void * wxWindow_PopEventHandler(void * self, bool delete_handler);
void wxWindow_PushEventHandler(void * self, void * handler);
bool wxWindow_RemoveEventHandler(void * self, void * handler);
void wxWindow_SetEventHandler(void * self, void * handler);
void wxWindow_SetNextHandler(void * self, void * handler);
void wxWindow_SetPreviousHandler(void * self, void * handler);
int32_t wxWindow_GetExtraStyle(const void * self);
int32_t wxWindow_GetWindowStyleFlag(const void * self);
int32_t wxWindow_GetWindowStyle(const void * self);
bool wxWindow_HasExtraStyle(const void * self, int ex_flag);
bool wxWindow_HasFlag(const void * self, int flag);
void wxWindow_SetExtraStyle(void * self, int32_t ex_style);
void wxWindow_SetWindowStyleFlag(void * self, int32_t style);
void wxWindow_SetWindowStyle(void * self, int32_t style);
bool wxWindow_ToggleWindowStyle(void * self, int flag);
void wxWindow_MoveAfterInTabOrder(void * self, void * win);
void wxWindow_MoveBeforeInTabOrder(void * self, void * win);
bool wxWindow_Navigate(void * self, int flags);
bool wxWindow_NavigateIn(void * self, int flags);
void wxWindow_Lower(void * self);
void wxWindow_Raise(void * self);
bool wxWindow_Hide(void * self);
bool wxWindow_IsEnabled(const void * self);
bool wxWindow_IsExposed(const void * self, int x, int y);
bool wxWindow_IsExposed1(const void * self, void * pt);
bool wxWindow_IsExposed2(const void * self, int x, int y, int w, int h);
bool wxWindow_IsExposed3(const void * self, void * rect);
bool wxWindow_IsShown(const void * self);
bool wxWindow_IsShownOnScreen(const void * self);
bool wxWindow_Disable(void * self);
bool wxWindow_Enable(void * self, bool enable);
bool wxWindow_Show(void * self, bool show);
void *wxWindow_GetHelpText(const void * self);
void wxWindow_SetHelpText(void * self, void * help_text);
void * wxWindow_GetToolTip(const void * self);
void *wxWindow_GetToolTipText(const void * self);
void wxWindow_SetToolTip(void * self, void * tip_string);
void wxWindow_SetToolTip1(void * self, void * tip);
void wxWindow_UnsetToolTip(void * self);
int wxWindow_GetPopupMenuSelectionFromUser(void * self, void * menu, void * pos);
int wxWindow_GetPopupMenuSelectionFromUser1(void * self, void * menu, int x, int y);
bool wxWindow_PopupMenu(void * self, void * menu, void * pos);
bool wxWindow_PopupMenu1(void * self, void * menu, int x, int y);
void * wxWindow_GetValidator(void * self);
void wxWindow_SetValidator(void * self, void * validator);
bool wxWindow_TransferDataFromWindow(void * self);
bool wxWindow_TransferDataToWindow(void * self);
bool wxWindow_Validate(void * self);
wxWindowID wxWindow_GetId(const void * self);
void *wxWindow_GetLabel(const void * self);
wxCoord wxWindow_AdjustForLayoutDirection(const void * self, wxCoord x, wxCoord width, wxCoord width_total);
void *wxWindow_GetName(const void * self);
void wxWindow_SetId(void * self, wxWindowID winid);
void wxWindow_SetLabel(void * self, void * label);
void wxWindow_SetName(void * self, void * name);
void * wxWindow_GetAcceleratorTable(void * self);
void wxWindow_SetAcceleratorTable(void * self, void * accel);
bool wxWindow_Close(void * self, bool force);
bool wxWindow_Destroy(void * self);
bool wxWindow_IsBeingDeleted(const void * self);
void * wxWindow_GetDropTarget(const void * self);
void wxWindow_SetDropTarget(void * self, void * target);
void wxWindow_DragAcceptFiles(void * self, bool accept);
void * wxWindow_GetContainingSizer(const void * self);
void * wxWindow_GetSizer(const void * self);
void wxWindow_SetSizer(void * self, void * sizer, bool delete_old);
void wxWindow_SetSizerAndFit(void * self, void * sizer, bool delete_old);
void * wxWindow_GetConstraints(const void * self);
void wxWindow_SetConstraints(void * self, void * constraints);
bool wxWindow_Layout(void * self);
void wxWindow_SetAutoLayout(void * self, bool auto_layout);
bool wxWindow_GetAutoLayout(const void * self);
void wxWindow_CaptureMouse(void * self);
void * wxWindow_GetCaret(const void * self);
bool wxWindow_HasCapture(const void * self);
void wxWindow_ReleaseMouse(void * self);
void wxWindow_SetCaret(void * self, void * caret);
bool wxWindow_SetCursor(void * self, void * cursor);
void wxWindow_WarpPointer(void * self, int x, int y);
bool wxWindow_EnableTouchEvents(void * self, int events_mask);
void wxWindow_DoUpdateWindowUI(void * self, void * event);
bool wxWindow_HasMultiplePages(const void * self);
void wxWindow_InheritAttributes(void * self);
void wxWindow_InitDialog(void * self);
bool wxWindow_IsDoubleBuffered(const void * self);
void wxWindow_SetDoubleBuffered(void * self, bool on);
bool wxWindow_IsRetained(const void * self);
bool wxWindow_IsThisEnabled(const void * self);
bool wxWindow_IsTopLevel(const void * self);
void wxWindow_OnInternalIdle(void * self);
bool wxWindow_SendIdleEvents(void * self, void * event);
bool wxWindow_RegisterHotKey(void * self, int hotkey_id, int modifiers, int virtual_key_code);
bool wxWindow_UnregisterHotKey(void * self, int hotkey_id);
void wxWindow_UpdateWindowUI(void * self, int32_t flags);
void * wxWindow_FindFocus();
void * wxWindow_FindWindowById(int32_t id, void * parent);
void * wxWindow_FindWindowByLabel(void * label, void * parent);
void * wxWindow_FindWindowByName(void * name, void * parent);
void * wxWindow_GetCapture();
wxWindowID wxWindow_NewControlId(int count);
void wxWindow_UnreserveControlId(wxWindowID id, int count);
void *wxWindow_new();
void *wxWindow_new1(void * parent, wxWindowID id, void * pos, void * size, int32_t style, void * name);
bool wxWindow_Create(void * self, void * parent, wxWindowID id, void * pos, void * size, int32_t style, void * name);

// CLASS: wxControl
void *wxControl_new(void * parent, wxWindowID id, void * pos, void * size, int32_t style, void * validator, void * name);
void *wxControl_new1();
bool wxControl_Create(void * self, void * parent, wxWindowID id, void * pos, void * size, int32_t style, void * validator, void * name);
void wxControl_Command(void * self, void * event);
void *wxControl_GetLabel(const void * self);
void *wxControl_GetLabelText(const void * self);
void *wxControl_GetSizeFromTextSize(const void * self, int xlen, int ylen);
void *wxControl_GetSizeFromTextSize1(const void * self, void * tsize);
void *wxControl_GetSizeFromText(const void * self, void * text);
void wxControl_SetLabel(void * self, void * label);
void wxControl_SetLabelText(void * self, void * text);
bool wxControl_SetLabelMarkup(void * self, void * markup);
void *wxControl_GetLabelText1(void * label);
void *wxControl_RemoveMnemonics(void * str);
void *wxControl_EscapeMnemonics(void * text);

// CLASS: wxAnyButton
void *wxAnyButton_new();
void wxAnyButton_SetBitmapCurrent(void * self, void * bitmap);
void wxAnyButton_SetBitmapDisabled(void * self, void * bitmap);
void wxAnyButton_SetBitmapFocus(void * self, void * bitmap);
void wxAnyButton_SetBitmapLabel(void * self, void * bitmap);
void wxAnyButton_SetBitmapPressed(void * self, void * bitmap);
void *wxAnyButton_GetBitmapMargins(void * self);
void wxAnyButton_SetBitmapMargins(void * self, wxCoord x, wxCoord y);
void wxAnyButton_SetBitmapMargins1(void * self, void * sz);

// CLASS: wxButton
void *wxButton_new();
void *wxButton_new1(void * parent, wxWindowID id, void * label, void * pos, void * size, int32_t style, void * validator, void * name);
bool wxButton_Create(void * self, void * parent, wxWindowID id, void * label, void * pos, void * size, int32_t style, void * validator, void * name);
bool wxButton_GetAuthNeeded(const void * self);
void *wxButton_GetLabel(const void * self);
void wxButton_SetAuthNeeded(void * self, bool needed);
void * wxButton_SetDefault(void * self);
void wxButton_SetLabel(void * self, void * label);
void *wxButton_GetDefaultSize(void * win);

// CLASS: wxNonOwnedWindow
bool wxNonOwnedWindow_SetShape(void * self, void * region);
bool wxNonOwnedWindow_SetShape1(void * self, void * path);

// CLASS: wxTopLevelWindow
void *wxTopLevelWindow_new();
void *wxTopLevelWindow_new1(void * parent, wxWindowID id, void * title, void * pos, void * size, int32_t style, void * name);
bool wxTopLevelWindow_Create(void * self, void * parent, wxWindowID id, void * title, void * pos, void * size, int32_t style, void * name);
bool wxTopLevelWindow_CanSetTransparent(void * self);
void wxTopLevelWindow_CenterOnScreen(void * self, int direction);
void wxTopLevelWindow_CentreOnScreen(void * self, int direction);
bool wxTopLevelWindow_EnableCloseButton(void * self, bool enable);
bool wxTopLevelWindow_EnableMaximizeButton(void * self, bool enable);
bool wxTopLevelWindow_EnableMinimizeButton(void * self, bool enable);
void * wxTopLevelWindow_GetDefaultItem(const void * self);
void *wxTopLevelWindow_GetTitle(const void * self);
void wxTopLevelWindow_Iconize(void * self, bool iconize);
bool wxTopLevelWindow_IsActive(void * self);
bool wxTopLevelWindow_IsAlwaysMaximized(const void * self);
bool wxTopLevelWindow_IsFullScreen(const void * self);
bool wxTopLevelWindow_IsIconized(const void * self);
bool wxTopLevelWindow_IsMaximized(const void * self);
bool wxTopLevelWindow_Layout(void * self);
void wxTopLevelWindow_Maximize(void * self, bool maximize);
void wxTopLevelWindow_RequestUserAttention(void * self, int flags);
void wxTopLevelWindow_Restore(void * self);
void * wxTopLevelWindow_SetDefaultItem(void * self, void * win);
void * wxTopLevelWindow_SetTmpDefaultItem(void * self, void * win);
void * wxTopLevelWindow_GetTmpDefaultItem(const void * self);
void wxTopLevelWindow_SetIcon(void * self, void * icon);
void wxTopLevelWindow_SetIcons(void * self, void * icons);
void wxTopLevelWindow_SetMaxSize(void * self, void * size);
void wxTopLevelWindow_SetMinSize(void * self, void * size);
void wxTopLevelWindow_SetSizeHints(void * self, int min_w, int min_h, int max_w, int max_h, int inc_w, int inc_h);
void wxTopLevelWindow_SetSizeHints1(void * self, void * min_size, void * max_size, void * inc_size);
void wxTopLevelWindow_SetTitle(void * self, void * title);
bool wxTopLevelWindow_SetTransparent(void * self, wxByte alpha);
bool wxTopLevelWindow_ShouldPreventAppExit(const void * self);
void wxTopLevelWindow_OSXSetModified(void * self, bool modified);
bool wxTopLevelWindow_OSXIsModified(const void * self);
void wxTopLevelWindow_SetRepresentedFilename(void * self, void * filename);
void wxTopLevelWindow_ShowWithoutActivating(void * self);
bool wxTopLevelWindow_EnableFullScreenView(void * self, bool enable);
bool wxTopLevelWindow_ShowFullScreen(void * self, bool show, int32_t style);
void *wxTopLevelWindow_GetDefaultSize();

// CLASS: wxFrame
void *wxFrame_new();
void *wxFrame_new1(void * parent, wxWindowID id, void * title, void * pos, void * size, int32_t style, void * name);
void wxFrame_Centre(void * self, int direction);
bool wxFrame_Create(void * self, void * parent, wxWindowID id, void * title, void * pos, void * size, int32_t style, void * name);
void * wxFrame_CreateStatusBar(void * self, int number, int32_t style, wxWindowID id, void * name);
void * wxFrame_CreateToolBar(void * self, int32_t style, wxWindowID id, void * name);
void wxFrame_DoGiveHelp(void * self, void * text, bool show);
void *wxFrame_GetClientAreaOrigin(const void * self);
void * wxFrame_GetMenuBar(const void * self);
void * wxFrame_GetStatusBar(const void * self);
int wxFrame_GetStatusBarPane(const void * self);
void * wxFrame_GetToolBar(const void * self);
void * wxFrame_OnCreateStatusBar(void * self, int number, int32_t style, wxWindowID id, void * name);
void * wxFrame_OnCreateToolBar(void * self, int32_t style, wxWindowID id, void * name);
bool wxFrame_ProcessCommand(void * self, int id);
void wxFrame_SetMenuBar(void * self, void * menu_bar);
void wxFrame_SetStatusBar(void * self, void * status_bar);
void wxFrame_SetStatusBarPane(void * self, int n);
void wxFrame_SetStatusText(void * self, void * text, int number);
void wxFrame_SetStatusWidths(void * self, int n, void * widths_field);
void wxFrame_SetToolBar(void * self, void * tool_bar);
void wxFrame_PushStatusText(void * self, void * text, int number);
void wxFrame_PopStatusText(void * self, int number);

// CLASS: wxPoint
bool wxPoint_IsFullySpecified(const void * self);
void wxPoint_SetDefaults(void * self, void * pt);
void *wxPoint_new();
void *wxPoint_new1(int x, int y);
void *wxPoint_new2(void * pt);

// CLASS: wxRect
void *wxRect_new();
void *wxRect_new1(int x, int y, int width, int height);
void *wxRect_new2(void * top_left, void * bottom_right);
void *wxRect_new3(void * pos, void * size);
void *wxRect_new4(void * size);
void *wxRect_CentreIn(const void * self, void * r, int dir);
void *wxRect_CenterIn(const void * self, void * r, int dir);
bool wxRect_Contains(const void * self, int x, int y);
bool wxRect_Contains1(const void * self, void * pt);
bool wxRect_Contains2(const void * self, void * rect);
void *wxRect_Deflate3(const void * self, wxCoord dx, wxCoord dy);
int wxRect_GetBottom(const void * self);
void *wxRect_GetBottomLeft(const void * self);
void *wxRect_GetBottomRight(const void * self);
int wxRect_GetHeight(const void * self);
int wxRect_GetLeft(const void * self);
void *wxRect_GetPosition(const void * self);
int wxRect_GetRight(const void * self);
void *wxRect_GetSize(const void * self);
int wxRect_GetTop(const void * self);
void *wxRect_GetTopLeft(const void * self);
void *wxRect_GetTopRight(const void * self);
int wxRect_GetWidth(const void * self);
int wxRect_GetX(const void * self);
int wxRect_GetY(const void * self);
void *wxRect_Inflate3(const void * self, wxCoord dx, wxCoord dy);
void *wxRect_Intersect1(const void * self, void * rect);
bool wxRect_Intersects(const void * self, void * rect);
bool wxRect_IsEmpty(const void * self);
void wxRect_Offset(void * self, wxCoord dx, wxCoord dy);
void wxRect_Offset1(void * self, void * pt);
void wxRect_SetHeight(void * self, int height);
void wxRect_SetPosition(void * self, void * pos);
void wxRect_SetSize(void * self, void * s);
void wxRect_SetWidth(void * self, int width);
void wxRect_SetX(void * self, int x);
void wxRect_SetY(void * self, int y);
void wxRect_SetLeft(void * self, int left);
void wxRect_SetRight(void * self, int right);
void wxRect_SetTop(void * self, int top);
void wxRect_SetBottom(void * self, int bottom);
void wxRect_SetTopLeft(void * self, void * p);
void wxRect_SetBottomRight(void * self, void * p);
void wxRect_SetTopRight(void * self, void * p);
void wxRect_SetBottomLeft(void * self, void * p);
void *wxRect_Union(const void * self, void * rect);

// CLASS: wxSize
void *wxSize_new();
void *wxSize_new1(int width, int height);
void wxSize_DecBy(void * self, void * pt);
void wxSize_DecBy1(void * self, void * size);
void wxSize_DecBy2(void * self, int dx, int dy);
void wxSize_DecBy3(void * self, int d);
void wxSize_DecTo(void * self, void * size);
void wxSize_DecToIfSpecified(void * self, void * size);
int wxSize_GetHeight(const void * self);
int wxSize_GetWidth(const void * self);
void wxSize_IncBy(void * self, void * pt);
void wxSize_IncBy1(void * self, void * size);
void wxSize_IncBy2(void * self, int dx, int dy);
void wxSize_IncBy3(void * self, int d);
void wxSize_IncTo(void * self, void * size);
bool wxSize_IsFullySpecified(const void * self);
void wxSize_Set(void * self, int width, int height);
void wxSize_SetDefaults(void * self, void * size_default);
void wxSize_SetHeight(void * self, int height);
void wxSize_SetWidth(void * self, int width);

// CLASS: wxValidator
void *wxValidator_new();
void * wxValidator_Clone(const void * self);
void * wxValidator_GetWindow(const void * self);
void wxValidator_SetWindow(void * self, void * window);
bool wxValidator_TransferFromWindow(void * self);
bool wxValidator_TransferToWindow(void * self);
bool wxValidator_Validate(void * self, void * parent);
void wxValidator_SuppressBellOnError(bool suppress);
bool wxValidator_IsSilent();

} // extern "C"

