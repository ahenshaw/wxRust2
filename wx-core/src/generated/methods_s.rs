use super::*;

// wxSVGFileDC
/// This trait represents C++ [`wxSVGFileDC`](https://docs.wxwidgets.org/3.2/classwx_s_v_g_file_d_c.html) class's methods and inheritance.
///
/// See [`SVGFileDCIsOwned`] documentation for the class usage.
pub trait SVGFileDCMethods: DCMethods {
    /// Replaces the default bitmap handler with handler.
    ///
    /// [See `wxSVGFileDC::SetBitmapHandler()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_s_v_g_file_d_c.html#aaba93d589668480bfb130e14a993e9cd)
    fn set_bitmap_handler(&self, handler: *mut c_void) {
        unsafe { ffi::wxSVGFileDC_SetBitmapHandler(self.as_ptr(), handler) }
    }
    // NOT_SUPPORTED: fn SetShapeRenderingMode()
}

// wxSashEvent
/// This trait represents C++ [`wxSashEvent`](https://docs.wxwidgets.org/3.2/classwx_sash_event.html) class's methods and inheritance.
///
/// See [`SashEventIsOwned`] documentation for the class usage.
pub trait SashEventMethods: CommandEventMethods {
    /// Returns the rectangle representing the new size the window would be if the resize was applied.
    ///
    /// [See `wxSashEvent::GetDragRect()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sash_event.html#ad0024bf96bb56ab47374490a9370fa66)
    fn get_drag_rect(&self) -> Rect {
        unsafe { Rect::from_ptr(ffi::wxSashEvent_GetDragRect(self.as_ptr())) }
    }
    // NOT_SUPPORTED: fn GetDragStatus()
    // NOT_SUPPORTED: fn GetEdge()
    // NOT_SUPPORTED: fn SetEdge()
    ///
    /// [See `wxSashEvent::SetDragRect()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sash_event.html#a46ca49b0fcc6330c6330261afc50eb18)
    fn set_drag_rect<R: RectMethods>(&self, rect: &R) {
        unsafe {
            let rect = rect.as_ptr();
            ffi::wxSashEvent_SetDragRect(self.as_ptr(), rect)
        }
    }
    // NOT_SUPPORTED: fn SetDragStatus()
}

// wxSashLayoutWindow
/// This trait represents C++ [`wxSashLayoutWindow`](https://docs.wxwidgets.org/3.2/classwx_sash_layout_window.html) class's methods and inheritance.
///
/// See [`SashLayoutWindowIsOwned`] documentation for the class usage.
pub trait SashLayoutWindowMethods: SashWindowMethods {
    // NOT_SUPPORTED: fn GetAlignment()
    // NOT_SUPPORTED: fn GetOrientation()
    /// The default handler for the event that is generated by wxLayoutAlgorithm.
    ///
    /// [See `wxSashLayoutWindow::OnCalculateLayout()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sash_layout_window.html#a980dceb898b349ade2330e61246e111d)
    fn on_calculate_layout<C: CalculateLayoutEventMethods>(&self, event: &C) {
        unsafe {
            let event = event.as_ptr();
            ffi::wxSashLayoutWindow_OnCalculateLayout(self.as_ptr(), event)
        }
    }
    /// The default handler for the event that is generated by OnCalculateLayout to get size, alignment and orientation information for the window.
    ///
    /// [See `wxSashLayoutWindow::OnQueryLayoutInfo()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sash_layout_window.html#a176aab3f2c3da7cefc542e645e765a98)
    fn on_query_layout_info<Q: QueryLayoutInfoEventMethods>(&self, event: &Q) {
        unsafe {
            let event = event.as_ptr();
            ffi::wxSashLayoutWindow_OnQueryLayoutInfo(self.as_ptr(), event)
        }
    }
    // NOT_SUPPORTED: fn SetAlignment()
    /// Sets the default dimensions of the window.
    ///
    /// [See `wxSashLayoutWindow::SetDefaultSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sash_layout_window.html#a15de165bb31954b84fb41355894a967d)
    fn set_default_size<S: SizeMethods>(&self, size: &S) {
        unsafe {
            let size = size.as_ptr();
            ffi::wxSashLayoutWindow_SetDefaultSize(self.as_ptr(), size)
        }
    }
    // NOT_SUPPORTED: fn SetOrientation()
}

// wxSashWindow
/// This trait represents C++ [`wxSashWindow`](https://docs.wxwidgets.org/3.2/classwx_sash_window.html) class's methods and inheritance.
///
/// See [`SashWindowIsOwned`] documentation for the class usage.
pub trait SashWindowMethods: WindowMethods {
    // DTOR: fn ~wxSashWindow()
    /// Gets the maximum window size in the x direction.
    ///
    /// [See `wxSashWindow::GetMaximumSizeX()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sash_window.html#a881290c21afa24f3595e1bd7b4733a81)
    fn get_maximum_size_x(&self) -> c_int {
        unsafe { ffi::wxSashWindow_GetMaximumSizeX(self.as_ptr()) }
    }
    /// Gets the maximum window size in the y direction.
    ///
    /// [See `wxSashWindow::GetMaximumSizeY()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sash_window.html#a247fce77390f53696eff24d88ffff5cb)
    fn get_maximum_size_y(&self) -> c_int {
        unsafe { ffi::wxSashWindow_GetMaximumSizeY(self.as_ptr()) }
    }
    /// Gets the minimum window size in the x direction.
    ///
    /// [See `wxSashWindow::GetMinimumSizeX()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sash_window.html#a117c04a76caf3a41fae61f6434b2bf88)
    fn get_minimum_size_x(&self) -> c_int {
        unsafe { ffi::wxSashWindow_GetMinimumSizeX(self.as_ptr()) }
    }
    /// Gets the minimum window size in the y direction.
    ///
    /// [See `wxSashWindow::GetMinimumSizeY()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sash_window.html#a2e22a71d160aa8465c5d793796e7c2fa)
    fn get_minimum_size_y(&self) -> c_int {
        unsafe { ffi::wxSashWindow_GetMinimumSizeY(self.as_ptr()) }
    }
    // NOT_SUPPORTED: fn GetSashVisible()
    /// Sets the maximum window size in the x direction.
    ///
    /// [See `wxSashWindow::SetMaximumSizeX()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sash_window.html#a31a5d16924b62648c44d966ff9a87414)
    fn set_maximum_size_x(&self, min: c_int) {
        unsafe { ffi::wxSashWindow_SetMaximumSizeX(self.as_ptr(), min) }
    }
    /// Sets the maximum window size in the y direction.
    ///
    /// [See `wxSashWindow::SetMaximumSizeY()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sash_window.html#a611a11221cd17757a44e944dd4ee90a5)
    fn set_maximum_size_y(&self, min: c_int) {
        unsafe { ffi::wxSashWindow_SetMaximumSizeY(self.as_ptr(), min) }
    }
    /// Sets the minimum window size in the x direction.
    ///
    /// [See `wxSashWindow::SetMinimumSizeX()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sash_window.html#a1de8e31899aacc41f9bffa7f25c2f9f7)
    fn set_minimum_size_x(&self, min: c_int) {
        unsafe { ffi::wxSashWindow_SetMinimumSizeX(self.as_ptr(), min) }
    }
    /// Sets the minimum window size in the y direction.
    ///
    /// [See `wxSashWindow::SetMinimumSizeY()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sash_window.html#a29bdb16095ffd1de0eb4d90ff3afa153)
    fn set_minimum_size_y(&self, min: c_int) {
        unsafe { ffi::wxSashWindow_SetMinimumSizeY(self.as_ptr(), min) }
    }
    // NOT_SUPPORTED: fn SetSashVisible()
    // NOT_SUPPORTED: fn GetEdgeMargin()
    /// Sets the default sash border size.
    ///
    /// [See `wxSashWindow::SetDefaultBorderSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sash_window.html#a2722202c61474e2fe043b753f9b825ab)
    fn set_default_border_size(&self, width: c_int) {
        unsafe { ffi::wxSashWindow_SetDefaultBorderSize(self.as_ptr(), width) }
    }
    /// Gets the default sash border size.
    ///
    /// [See `wxSashWindow::GetDefaultBorderSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sash_window.html#aa5ca28ee7fde339bacfb071fda558328)
    fn get_default_border_size(&self) -> c_int {
        unsafe { ffi::wxSashWindow_GetDefaultBorderSize(self.as_ptr()) }
    }
    /// Sets the additional border size between child and sash window.
    ///
    /// [See `wxSashWindow::SetExtraBorderSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sash_window.html#ac4b01712df62b915c2c3998d0266f0b2)
    fn set_extra_border_size(&self, width: c_int) {
        unsafe { ffi::wxSashWindow_SetExtraBorderSize(self.as_ptr(), width) }
    }
    /// Gets the addition border size between child and sash window.
    ///
    /// [See `wxSashWindow::GetExtraBorderSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sash_window.html#aca75cc77c468ccb2c29ff5a9830a18d0)
    fn get_extra_border_size(&self) -> c_int {
        unsafe { ffi::wxSashWindow_GetExtraBorderSize(self.as_ptr()) }
    }
    // NOT_SUPPORTED: fn SashHitTest()
    /// Resizes subwindows.
    ///
    /// [See `wxSashWindow::SizeWindows()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sash_window.html#a16fbe99915095c56e42f40c81319ab62)
    fn size_windows(&self) {
        unsafe { ffi::wxSashWindow_SizeWindows(self.as_ptr()) }
    }
}

// wxScreenDC
/// This trait represents C++ [`wxScreenDC`](https://docs.wxwidgets.org/3.2/classwx_screen_d_c.html) class's methods and inheritance.
///
/// See [`ScreenDCIsOwned`] documentation for the class usage.
pub trait ScreenDCMethods: DCMethods {
    /// Use this in conjunction with StartDrawingOnTop().
    ///
    /// [See `wxScreenDC::EndDrawingOnTop()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_screen_d_c.html#aaff9789f38fa243d0a3f583e5eb36505)
    fn end_drawing_on_top() -> bool {
        unsafe { ffi::wxScreenDC_EndDrawingOnTop() }
    }
    /// Use this in conjunction with EndDrawingOnTop() to ensure that drawing to the screen occurs on top of existing windows.
    ///
    /// [See `wxScreenDC::StartDrawingOnTop()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_screen_d_c.html#af9cdb834dfbdbbe0c0caea14d7724a67)
    fn start_drawing_on_top_window<W: WindowMethods>(window: Option<&W>) -> bool {
        unsafe {
            let window = match window {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxScreenDC_StartDrawingOnTop(window)
        }
    }
    /// Use this in conjunction with EndDrawingOnTop() to ensure that drawing to the screen occurs on top of existing windows.
    ///
    /// [See `wxScreenDC::StartDrawingOnTop()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_screen_d_c.html#a261ded9137e3b10e972952cad6402655)
    fn start_drawing_on_top_rect<R: RectMethods>(rect: Option<&R>) -> bool {
        unsafe {
            let rect = match rect {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxScreenDC_StartDrawingOnTop1(rect)
        }
    }
}

// wxScrollBar
/// This trait represents C++ [`wxScrollBar`](https://docs.wxwidgets.org/3.2/classwx_scroll_bar.html) class's methods and inheritance.
///
/// See [`ScrollBarIsOwned`] documentation for the class usage.
pub trait ScrollBarMethods: ControlMethods {
    // DTOR: fn ~wxScrollBar()
    /// Returns the page size of the scrollbar.
    ///
    /// [See `wxScrollBar::GetPageSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_scroll_bar.html#a73cc6321e449b38f7cb046d01c050906)
    fn get_page_size(&self) -> c_int {
        unsafe { ffi::wxScrollBar_GetPageSize(self.as_ptr()) }
    }
    /// Returns the length of the scrollbar.
    ///
    /// [See `wxScrollBar::GetRange()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_scroll_bar.html#ac3eea76f60819a11a6c1724b41d4e252)
    fn get_range(&self) -> c_int {
        unsafe { ffi::wxScrollBar_GetRange(self.as_ptr()) }
    }
    /// Returns the current position of the scrollbar thumb.
    ///
    /// [See `wxScrollBar::GetThumbPosition()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_scroll_bar.html#a0e64a467c152f98968d6fc4aa2db5f76)
    fn get_thumb_position(&self) -> c_int {
        unsafe { ffi::wxScrollBar_GetThumbPosition(self.as_ptr()) }
    }
    /// Returns the thumb or 'view' size.
    ///
    /// [See `wxScrollBar::GetThumbSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_scroll_bar.html#a3598f69999bddfbd3a27f27329bbb7c6)
    fn get_thumb_size(&self) -> c_int {
        unsafe { ffi::wxScrollBar_GetThumbSize(self.as_ptr()) }
    }
    /// Sets the position of the scrollbar.
    ///
    /// [See `wxScrollBar::SetThumbPosition()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_scroll_bar.html#a5b85120679908098649436a80805e772)
    fn set_thumb_position(&self, view_start: c_int) {
        unsafe { ffi::wxScrollBar_SetThumbPosition(self.as_ptr(), view_start) }
    }
    /// Returns true for scrollbars that have the vertical style set.
    ///
    /// [See `wxScrollBar::IsVertical()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_scroll_bar.html#aa4634a4ee19616b303cec0db2f96ad44)
    fn is_vertical(&self) -> bool {
        unsafe { ffi::wxScrollBar_IsVertical(self.as_ptr()) }
    }
}

// wxScrollEvent
/// This trait represents C++ [`wxScrollEvent`](https://docs.wxwidgets.org/3.2/classwx_scroll_event.html) class's methods and inheritance.
///
/// See [`ScrollEventIsOwned`] documentation for the class usage.
pub trait ScrollEventMethods: CommandEventMethods {
    /// Returns wxHORIZONTAL or wxVERTICAL, depending on the orientation of the scrollbar.
    ///
    /// [See `wxScrollEvent::GetOrientation()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_scroll_event.html#a8be98254dc58119e1e08d819034f86a2)
    fn get_orientation(&self) -> c_int {
        unsafe { ffi::wxScrollEvent_GetOrientation(self.as_ptr()) }
    }
    /// Returns the position of the scrollbar.
    ///
    /// [See `wxScrollEvent::GetPosition()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_scroll_event.html#a84e3dd8a0a47dbe0d49d55442900f495)
    fn get_position(&self) -> c_int {
        unsafe { ffi::wxScrollEvent_GetPosition(self.as_ptr()) }
    }
    ///
    /// [See `wxScrollEvent::SetOrientation()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_scroll_event.html#acbe59c387a80ef7b98f9c0f2308e7ab5)
    fn set_orientation(&self, orient: c_int) {
        unsafe { ffi::wxScrollEvent_SetOrientation(self.as_ptr(), orient) }
    }
    ///
    /// [See `wxScrollEvent::SetPosition()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_scroll_event.html#a89ec1c45caac5f2548ad7875124e5a6b)
    fn set_position(&self, pos: c_int) {
        unsafe { ffi::wxScrollEvent_SetPosition(self.as_ptr(), pos) }
    }
}

// wxScrollWinEvent
/// This trait represents C++ [`wxScrollWinEvent`](https://docs.wxwidgets.org/3.2/classwx_scroll_win_event.html) class's methods and inheritance.
///
/// See [`ScrollWinEventIsOwned`] documentation for the class usage.
pub trait ScrollWinEventMethods: EventMethods {
    /// Returns wxHORIZONTAL or wxVERTICAL, depending on the orientation of the scrollbar.
    ///
    /// [See `wxScrollWinEvent::GetOrientation()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_scroll_win_event.html#a5aad63902c7a410a8db4b45a51e5f0d6)
    fn get_orientation(&self) -> c_int {
        unsafe { ffi::wxScrollWinEvent_GetOrientation(self.as_ptr()) }
    }
    /// Returns the position of the scrollbar for the thumb track and release events.
    ///
    /// [See `wxScrollWinEvent::GetPosition()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_scroll_win_event.html#ab8217b0b28caedce19c6bf323649d115)
    fn get_position(&self) -> c_int {
        unsafe { ffi::wxScrollWinEvent_GetPosition(self.as_ptr()) }
    }
    ///
    /// [See `wxScrollWinEvent::SetOrientation()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_scroll_win_event.html#af78dd191ab94c6bc08b2905129eac9d8)
    fn set_orientation(&self, orient: c_int) {
        unsafe { ffi::wxScrollWinEvent_SetOrientation(self.as_ptr(), orient) }
    }
    ///
    /// [See `wxScrollWinEvent::SetPosition()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_scroll_win_event.html#ac4a9a862ce25c4e050a166a7f0e27709)
    fn set_position(&self, pos: c_int) {
        unsafe { ffi::wxScrollWinEvent_SetPosition(self.as_ptr(), pos) }
    }
}

// wxSearchCtrl
/// This trait represents C++ [`wxSearchCtrl`](https://docs.wxwidgets.org/3.2/classwx_search_ctrl.html) class's methods and inheritance.
///
/// See [`SearchCtrlIsOwned`] documentation for the class usage.
pub trait SearchCtrlMethods: TextCtrlMethods {
    // DTOR: fn ~wxSearchCtrl()
    /// Returns a pointer to the search control's menu object or NULL if there is no menu attached.
    ///
    /// [See `wxSearchCtrl::GetMenu()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_search_ctrl.html#a9d534b41553cc8e8ea33a21f33d04a2e)
    fn get_menu(&self) -> WeakRef<Menu> {
        unsafe { WeakRef::<Menu>::from(ffi::wxSearchCtrl_GetMenu(self.as_ptr())) }
    }
    /// Returns the search button visibility value.
    ///
    /// [See `wxSearchCtrl::IsSearchButtonVisible()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_search_ctrl.html#a29c6a7b9aa02db059c2bd98d2a80e7b1)
    fn is_search_button_visible(&self) -> bool {
        unsafe { ffi::wxSearchCtrl_IsSearchButtonVisible(self.as_ptr()) }
    }
    /// Returns the cancel button's visibility state.
    ///
    /// [See `wxSearchCtrl::IsCancelButtonVisible()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_search_ctrl.html#a88b890e5a3e7365c719ad5d0e535583d)
    fn is_cancel_button_visible(&self) -> bool {
        unsafe { ffi::wxSearchCtrl_IsCancelButtonVisible(self.as_ptr()) }
    }
    /// Sets the search control's menu object.
    ///
    /// [See `wxSearchCtrl::SetMenu()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_search_ctrl.html#a9f18c479114987e08b5eb6e12a0e4a07)
    fn set_menu<M: MenuMethods>(&self, menu: Option<&M>) {
        unsafe {
            let menu = match menu {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSearchCtrl_SetMenu(self.as_ptr(), menu)
        }
    }
    /// Shows or hides the cancel button.
    ///
    /// [See `wxSearchCtrl::ShowCancelButton()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_search_ctrl.html#a0fcdffea50164baa9b34794dc1bb0e01)
    fn show_cancel_button(&self, show: bool) {
        unsafe { ffi::wxSearchCtrl_ShowCancelButton(self.as_ptr(), show) }
    }
    /// Sets the search button visibility value on the search control.
    ///
    /// [See `wxSearchCtrl::ShowSearchButton()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_search_ctrl.html#a750a459667f79927b860e4cbb556826b)
    fn show_search_button(&self, show: bool) {
        unsafe { ffi::wxSearchCtrl_ShowSearchButton(self.as_ptr(), show) }
    }
    /// Set the text to be displayed in the search control when the user has not yet typed anything in it.
    ///
    /// [See `wxSearchCtrl::SetDescriptiveText()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_search_ctrl.html#a0604addbb924aff847756c6aecfd9423)
    fn set_descriptive_text(&self, text: &str) {
        unsafe {
            let text = WxString::from(text);
            let text = text.as_ptr();
            ffi::wxSearchCtrl_SetDescriptiveText(self.as_ptr(), text)
        }
    }
    /// Return the text displayed when there is not yet any user input.
    ///
    /// [See `wxSearchCtrl::GetDescriptiveText()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_search_ctrl.html#ad58ffc965b0a312382578de0109500f6)
    fn get_descriptive_text(&self) -> String {
        unsafe { WxString::from_ptr(ffi::wxSearchCtrl_GetDescriptiveText(self.as_ptr())).into() }
    }
}

// wxSetCursorEvent
/// This trait represents C++ [`wxSetCursorEvent`](https://docs.wxwidgets.org/3.2/classwx_set_cursor_event.html) class's methods and inheritance.
///
/// See [`SetCursorEventIsOwned`] documentation for the class usage.
pub trait SetCursorEventMethods: EventMethods {
    /// Returns a reference to the cursor specified by this event.
    ///
    /// [See `wxSetCursorEvent::GetCursor()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_set_cursor_event.html#a136861df3000af87e0b6e2363be56886)
    fn get_cursor(&self) -> CursorIsOwned<false> {
        unsafe { CursorIsOwned::from_ptr(ffi::wxSetCursorEvent_GetCursor(self.as_ptr())) }
    }
    /// Returns the X coordinate of the mouse in client coordinates.
    ///
    /// [See `wxSetCursorEvent::GetX()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_set_cursor_event.html#aedfb0e0f28901b306e14c9692c2c2d64)
    fn get_x(&self) -> c_int {
        unsafe { ffi::wxSetCursorEvent_GetX(self.as_ptr()) }
    }
    /// Returns the Y coordinate of the mouse in client coordinates.
    ///
    /// [See `wxSetCursorEvent::GetY()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_set_cursor_event.html#a75ebc23d741a6612fb3e94407733b316)
    fn get_y(&self) -> c_int {
        unsafe { ffi::wxSetCursorEvent_GetY(self.as_ptr()) }
    }
    /// Returns true if the cursor specified by this event is a valid cursor.
    ///
    /// [See `wxSetCursorEvent::HasCursor()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_set_cursor_event.html#a176eb09d515d330c690680cfaf62ef9d)
    fn has_cursor(&self) -> bool {
        unsafe { ffi::wxSetCursorEvent_HasCursor(self.as_ptr()) }
    }
    /// Sets the cursor associated with this event.
    ///
    /// [See `wxSetCursorEvent::SetCursor()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_set_cursor_event.html#a7400d6ad61fa844ed63b8ab02da2c164)
    fn set_cursor<C: CursorMethods>(&self, cursor: &C) {
        unsafe {
            let cursor = cursor.as_ptr();
            ffi::wxSetCursorEvent_SetCursor(self.as_ptr(), cursor)
        }
    }
}

// wxSettableHeaderColumn
/// This trait represents C++ [`wxSettableHeaderColumn`](https://docs.wxwidgets.org/3.2/classwx_settable_header_column.html) class's methods and inheritance.
///
/// See [`SettableHeaderColumnIsOwned`] documentation for the class usage.
pub trait SettableHeaderColumnMethods: HeaderColumnMethods {
    /// Set the text to display in the column header.
    ///
    /// [See `wxSettableHeaderColumn::SetTitle()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_settable_header_column.html#aa660fcc904edf557aaf68937aba1589f)
    fn set_title(&self, title: &str) {
        unsafe {
            let title = WxString::from(title);
            let title = title.as_ptr();
            ffi::wxSettableHeaderColumn_SetTitle(self.as_ptr(), title)
        }
    }
    /// Set the bitmap to be displayed in the column header.
    ///
    /// [See `wxSettableHeaderColumn::SetBitmap()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_settable_header_column.html#aabc2c982a98ebeb9108e0fd98a3eea6e)
    fn set_bitmap<B: BitmapBundleMethods>(&self, bitmap: &B) {
        unsafe {
            let bitmap = bitmap.as_ptr();
            ffi::wxSettableHeaderColumn_SetBitmap(self.as_ptr(), bitmap)
        }
    }
    /// Set the column width.
    ///
    /// [See `wxSettableHeaderColumn::SetWidth()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_settable_header_column.html#aac89bf5d893ccf57c3e50e3d1acbebea)
    fn set_width(&self, width: c_int) {
        unsafe { ffi::wxSettableHeaderColumn_SetWidth(self.as_ptr(), width) }
    }
    /// Set the minimal column width.
    ///
    /// [See `wxSettableHeaderColumn::SetMinWidth()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_settable_header_column.html#a83af483273d0a5263377a83800a3dad3)
    fn set_min_width(&self, min_width: c_int) {
        unsafe { ffi::wxSettableHeaderColumn_SetMinWidth(self.as_ptr(), min_width) }
    }
    /// Set the alignment of the column header.
    ///
    /// [See `wxSettableHeaderColumn::SetAlignment()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_settable_header_column.html#a6b516a1b80ebe8d336ea31e29d9ded00)
    fn set_alignment(&self, align: c_int) {
        unsafe { ffi::wxSettableHeaderColumn_SetAlignment(self.as_ptr(), align) }
    }
    /// Set the column flags.
    ///
    /// [See `wxSettableHeaderColumn::SetFlags()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_settable_header_column.html#aaeebec7c145f5b36914694fa231df528)
    fn set_flags(&self, flags: c_int) {
        unsafe { ffi::wxSettableHeaderColumn_SetFlags(self.as_ptr(), flags) }
    }
    /// Set or clear the given flag.
    ///
    /// [See `wxSettableHeaderColumn::ChangeFlag()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_settable_header_column.html#ae4c0570355a3c4b712352457c925a7dd)
    fn change_flag(&self, flag: c_int, set: bool) {
        unsafe { ffi::wxSettableHeaderColumn_ChangeFlag(self.as_ptr(), flag, set) }
    }
    /// Set the specified flag for the column.
    ///
    /// [See `wxSettableHeaderColumn::SetFlag()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_settable_header_column.html#a71eddf8ebeb18d55d10fd40cc457aa97)
    fn set_flag(&self, flag: c_int) {
        unsafe { ffi::wxSettableHeaderColumn_SetFlag(self.as_ptr(), flag) }
    }
    /// Clear the specified flag for the column.
    ///
    /// [See `wxSettableHeaderColumn::ClearFlag()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_settable_header_column.html#afb2fa0ed8e8e729d16ff9fefe9e41a26)
    fn clear_flag(&self, flag: c_int) {
        unsafe { ffi::wxSettableHeaderColumn_ClearFlag(self.as_ptr(), flag) }
    }
    /// Toggle the specified flag for the column.
    ///
    /// [See `wxSettableHeaderColumn::ToggleFlag()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_settable_header_column.html#a4734d269e6b4454aae75eb3641f4b023)
    fn toggle_flag(&self, flag: c_int) {
        unsafe { ffi::wxSettableHeaderColumn_ToggleFlag(self.as_ptr(), flag) }
    }
    /// Call this to enable or disable interactive resizing of the column by the user.
    ///
    /// [See `wxSettableHeaderColumn::SetResizeable()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_settable_header_column.html#ac8996814e5625c634ed71d932071c6c1)
    fn set_resizeable(&self, resizable: bool) {
        unsafe { ffi::wxSettableHeaderColumn_SetResizeable(self.as_ptr(), resizable) }
    }
    /// Allow clicking the column to sort the control contents by the field in this column.
    ///
    /// [See `wxSettableHeaderColumn::SetSortable()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_settable_header_column.html#afa46b4fd0a56898b3e2d5cc8e4401757)
    fn set_sortable(&self, sortable: bool) {
        unsafe { ffi::wxSettableHeaderColumn_SetSortable(self.as_ptr(), sortable) }
    }
    /// Allow changing the column order by dragging it.
    ///
    /// [See `wxSettableHeaderColumn::SetReorderable()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_settable_header_column.html#a954858d4987d17a2f8fa30ef84ad2445)
    fn set_reorderable(&self, reorderable: bool) {
        unsafe { ffi::wxSettableHeaderColumn_SetReorderable(self.as_ptr(), reorderable) }
    }
    /// Hide or show the column.
    ///
    /// [See `wxSettableHeaderColumn::SetHidden()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_settable_header_column.html#a92740fb99132c52fd91f333d703b0410)
    fn set_hidden(&self, hidden: bool) {
        unsafe { ffi::wxSettableHeaderColumn_SetHidden(self.as_ptr(), hidden) }
    }
    /// Don't use this column for sorting.
    ///
    /// [See `wxSettableHeaderColumn::UnsetAsSortKey()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_settable_header_column.html#a9f045a0c1f080d10600c8680b6e7a5b6)
    fn unset_as_sort_key(&self) {
        unsafe { ffi::wxSettableHeaderColumn_UnsetAsSortKey(self.as_ptr()) }
    }
    /// Sets this column as the sort key for the associated control.
    ///
    /// [See `wxSettableHeaderColumn::SetSortOrder()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_settable_header_column.html#a360deabbdb9ede8c9e616d460f276124)
    fn set_sort_order(&self, ascending: bool) {
        unsafe { ffi::wxSettableHeaderColumn_SetSortOrder(self.as_ptr(), ascending) }
    }
    /// Inverses the sort order.
    ///
    /// [See `wxSettableHeaderColumn::ToggleSortOrder()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_settable_header_column.html#a85f9c3278526a0f60b79fd32607d31bb)
    fn toggle_sort_order(&self) {
        unsafe { ffi::wxSettableHeaderColumn_ToggleSortOrder(self.as_ptr()) }
    }
}

// wxShowEvent
/// This trait represents C++ [`wxShowEvent`](https://docs.wxwidgets.org/3.2/classwx_show_event.html) class's methods and inheritance.
///
/// See [`ShowEventIsOwned`] documentation for the class usage.
pub trait ShowEventMethods: EventMethods {
    /// Set whether the windows was shown or hidden.
    ///
    /// [See `wxShowEvent::SetShow()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_show_event.html#ab6ea5da561c6d5f19b5e06437c84fea1)
    fn set_show(&self, show: bool) {
        unsafe { ffi::wxShowEvent_SetShow(self.as_ptr(), show) }
    }
    /// Return true if the window has been shown, false if it has been hidden.
    ///
    /// [See `wxShowEvent::IsShown()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_show_event.html#a99b36934317d1c96cf30d8c97524a39b)
    fn is_shown(&self) -> bool {
        unsafe { ffi::wxShowEvent_IsShown(self.as_ptr()) }
    }
    // BLOCKED: fn GetShow()
}

// wxSimplebook
/// This trait represents C++ [`wxSimplebook`](https://docs.wxwidgets.org/3.2/classwx_simplebook.html) class's methods and inheritance.
///
/// See [`SimplebookIsOwned`] documentation for the class usage.
pub trait SimplebookMethods: BookCtrlBaseMethods {
    // NOT_SUPPORTED: fn SetEffects()
    // NOT_SUPPORTED: fn SetEffect()
    // NOT_SUPPORTED: fn SetEffectsTimeouts()
    // NOT_SUPPORTED: fn SetEffectTimeout()
    /// Add a new page and show it immediately.
    ///
    /// [See `wxSimplebook::ShowNewPage()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_simplebook.html#a50847ce0be324127f8531ea92090768a)
    fn show_new_page<W: WindowMethods>(&self, page: Option<&W>) -> bool {
        unsafe {
            let page = match page {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSimplebook_ShowNewPage(self.as_ptr(), page)
        }
    }
}

// wxSize
/// This trait represents C++ [`wxSize`](https://docs.wxwidgets.org/3.2/classwx_size.html) class's methods and inheritance.
///
/// See [`SizeIsOwned`] documentation for the class usage.
pub trait SizeMethods: WxRustMethods {
    // BLOCKED: fn operator=()
    // BLOCKED: fn operator==()
    // BLOCKED: fn operator!=()
    // BLOCKED: fn operator+()
    // BLOCKED: fn operator-()
    // BLOCKED: fn operator+=()
    // BLOCKED: fn operator-=()
    // BLOCKED: fn operator/()
    // BLOCKED: fn operator/1()
    // BLOCKED: fn operator*()
    // BLOCKED: fn operator*1()
    // BLOCKED: fn operator*2()
    // BLOCKED: fn operator*3()
    // BLOCKED: fn operator/=()
    // BLOCKED: fn operator/=1()
    // BLOCKED: fn operator*=()
    // BLOCKED: fn operator*=1()
    /// Decreases the size in both x and y directions.
    ///
    /// [See `wxSize::DecBy()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_size.html#a7f1e3a02453f5b97c53322031b07d36d)
    fn dec_by_point<P: PointMethods>(&self, pt: &P) {
        unsafe {
            let pt = pt.as_ptr();
            ffi::wxSize_DecBy(self.as_ptr(), pt)
        }
    }
    ///
    /// [See `wxSize::DecBy()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_size.html#ab0d46d98d425f35d51a8a284f0d65fb5)
    fn dec_by_size<S: SizeMethods>(&self, size: &S) {
        unsafe {
            let size = size.as_ptr();
            ffi::wxSize_DecBy1(self.as_ptr(), size)
        }
    }
    ///
    /// [See `wxSize::DecBy()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_size.html#aea2001c0eb4ee58bfe8053dae90c35e5)
    fn dec_by_int_int(&self, dx: c_int, dy: c_int) {
        unsafe { ffi::wxSize_DecBy2(self.as_ptr(), dx, dy) }
    }
    ///
    /// [See `wxSize::DecBy()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_size.html#ad67ffe193f1390c3b59ca90bee2297e9)
    fn dec_by_int(&self, d: c_int) {
        unsafe { ffi::wxSize_DecBy3(self.as_ptr(), d) }
    }
    /// Decrements this object so that both of its dimensions are not greater than the corresponding dimensions of the size.
    ///
    /// [See `wxSize::DecTo()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_size.html#ac1e1d3b84b295669b20323b72a9c14a9)
    fn dec_to<S: SizeMethods>(&self, size: &S) {
        unsafe {
            let size = size.as_ptr();
            ffi::wxSize_DecTo(self.as_ptr(), size)
        }
    }
    /// Decrements this object to be not bigger than the given size ignoring non-specified components.
    ///
    /// [See `wxSize::DecToIfSpecified()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_size.html#a69daafac1a27c09d5e2ed2b019fa0672)
    fn dec_to_if_specified<S: SizeMethods>(&self, size: &S) {
        unsafe {
            let size = size.as_ptr();
            ffi::wxSize_DecToIfSpecified(self.as_ptr(), size)
        }
    }
    /// Gets the height member.
    ///
    /// [See `wxSize::GetHeight()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_size.html#a94c22e74d45237b2b97e01a132c5280f)
    fn get_height(&self) -> c_int {
        unsafe { ffi::wxSize_GetHeight(self.as_ptr()) }
    }
    /// Gets the width member.
    ///
    /// [See `wxSize::GetWidth()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_size.html#a8febbc02eb37b204fea2af86283c0a1d)
    fn get_width(&self) -> c_int {
        unsafe { ffi::wxSize_GetWidth(self.as_ptr()) }
    }
    /// Increases the size in both x and y directions.
    ///
    /// [See `wxSize::IncBy()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_size.html#a0ce7f06029d8d884e673d6115180ed9c)
    fn inc_by_point<P: PointMethods>(&self, pt: &P) {
        unsafe {
            let pt = pt.as_ptr();
            ffi::wxSize_IncBy(self.as_ptr(), pt)
        }
    }
    ///
    /// [See `wxSize::IncBy()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_size.html#abdddee0dd164b74d899c05f1ee6ea5e6)
    fn inc_by_size<S: SizeMethods>(&self, size: &S) {
        unsafe {
            let size = size.as_ptr();
            ffi::wxSize_IncBy1(self.as_ptr(), size)
        }
    }
    ///
    /// [See `wxSize::IncBy()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_size.html#a1cef28aa72da68daea6a8ffd0e417a41)
    fn inc_by_int_int(&self, dx: c_int, dy: c_int) {
        unsafe { ffi::wxSize_IncBy2(self.as_ptr(), dx, dy) }
    }
    ///
    /// [See `wxSize::IncBy()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_size.html#a5b93ee9afc913c3aaa061a4d436e91e4)
    fn inc_by_int(&self, d: c_int) {
        unsafe { ffi::wxSize_IncBy3(self.as_ptr(), d) }
    }
    /// Increments this object so that both of its dimensions are not less than the corresponding dimensions of the size.
    ///
    /// [See `wxSize::IncTo()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_size.html#a8377564f72496d664286bdad0fdce941)
    fn inc_to<S: SizeMethods>(&self, size: &S) {
        unsafe {
            let size = size.as_ptr();
            ffi::wxSize_IncTo(self.as_ptr(), size)
        }
    }
    /// Returns true if neither of the size object components is equal to -1, which is used as default for the size values in wxWidgets (hence the predefined wxDefaultSize has both of its components equal to -1).
    ///
    /// [See `wxSize::IsFullySpecified()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_size.html#ae4907fb918d8995d3616dfde5a73024d)
    fn is_fully_specified(&self) -> bool {
        unsafe { ffi::wxSize_IsFullySpecified(self.as_ptr()) }
    }
    // BLOCKED: fn Scale()
    /// Sets the width and height members.
    ///
    /// [See `wxSize::Set()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_size.html#ac5dbc35615c2d17ccb072efe334c75bb)
    fn set(&self, width: c_int, height: c_int) {
        unsafe { ffi::wxSize_Set(self.as_ptr(), width, height) }
    }
    /// Combine this size object with another one replacing the default (i.e. equal to -1) components of this object with those of the other.
    ///
    /// [See `wxSize::SetDefaults()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_size.html#aa0666752c5721566e4d80a82cf60c99a)
    fn set_defaults<S: SizeMethods>(&self, size_default: &S) {
        unsafe {
            let size_default = size_default.as_ptr();
            ffi::wxSize_SetDefaults(self.as_ptr(), size_default)
        }
    }
    /// Sets the height.
    ///
    /// [See `wxSize::SetHeight()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_size.html#a4567577104dbf480c6331f97a71e73ab)
    fn set_height(&self, height: c_int) {
        unsafe { ffi::wxSize_SetHeight(self.as_ptr(), height) }
    }
    /// Sets the width.
    ///
    /// [See `wxSize::SetWidth()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_size.html#a41d149df3805e7bca1d39eda9e035920)
    fn set_width(&self, width: c_int) {
        unsafe { ffi::wxSize_SetWidth(self.as_ptr(), width) }
    }
}

// wxSizeEvent
/// This trait represents C++ [`wxSizeEvent`](https://docs.wxwidgets.org/3.2/classwx_size_event.html) class's methods and inheritance.
///
/// See [`SizeEventIsOwned`] documentation for the class usage.
pub trait SizeEventMethods: EventMethods {
    /// Returns the entire size of the window generating the size change event.
    ///
    /// [See `wxSizeEvent::GetSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_size_event.html#ae7b854e7945a9cc98b534bcb92297e3b)
    fn get_size(&self) -> Size {
        unsafe { Size::from_ptr(ffi::wxSizeEvent_GetSize(self.as_ptr())) }
    }
    // BLOCKED: fn SetSize()
    ///
    /// [See `wxSizeEvent::GetRect()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_size_event.html#a710e1ca3995033e4c0f2db9937f5a481)
    fn get_rect(&self) -> Rect {
        unsafe { Rect::from_ptr(ffi::wxSizeEvent_GetRect(self.as_ptr())) }
    }
    // BLOCKED: fn SetRect()
}

// wxSizer
/// This trait represents C++ [`wxSizer`](https://docs.wxwidgets.org/3.2/classwx_sizer.html) class's methods and inheritance.
///
/// See [`SizerIsOwned`] documentation for the class usage.
pub trait SizerMethods: ObjectMethods {
    // DTOR: fn ~wxSizer()
    /// Appends a child to the sizer.
    ///
    /// [See `wxSizer::Add()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#add4f504521ae50d0a4dc8ddc4a3538f2)
    fn add_window_sizerflags<W: WindowMethods, S: SizerFlagsMethods>(
        &self,
        window: Option<&W>,
        flags: &S,
    ) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            let window = match window {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let flags = flags.as_ptr();
            SizerItem::option_from(ffi::wxSizer_Add(self.as_ptr(), window, flags))
        }
    }
    /// Appends a child to the sizer.
    ///
    /// [See `wxSizer::Add()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a3456d80dbe54e83980638536832f381e)
    fn add_window_int<W: WindowMethods, O: ObjectMethods>(
        &self,
        window: Option<&W>,
        proportion: c_int,
        flag: c_int,
        border: c_int,
        user_data: Option<&O>,
    ) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            let window = match window {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let user_data = match user_data {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            SizerItem::option_from(ffi::wxSizer_Add1(
                self.as_ptr(),
                window,
                proportion,
                flag,
                border,
                user_data,
            ))
        }
    }
    /// Appends a child to the sizer.
    ///
    /// [See `wxSizer::Add()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a937ce62ae616178838ea8df684eb0345)
    fn add_sizer_sizerflags<S: SizerMethods, S2: SizerFlagsMethods>(
        &self,
        sizer: Option<&S>,
        flags: &S2,
    ) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            let sizer = match sizer {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let flags = flags.as_ptr();
            SizerItem::option_from(ffi::wxSizer_Add2(self.as_ptr(), sizer, flags))
        }
    }
    /// Appends a child to the sizer.
    ///
    /// [See `wxSizer::Add()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a2b57ae934b240893fca8acbcc0084b13)
    fn add_sizer_int<S: SizerMethods, O: ObjectMethods>(
        &self,
        sizer: Option<&S>,
        proportion: c_int,
        flag: c_int,
        border: c_int,
        user_data: Option<&O>,
    ) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            let sizer = match sizer {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let user_data = match user_data {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            SizerItem::option_from(ffi::wxSizer_Add3(
                self.as_ptr(),
                sizer,
                proportion,
                flag,
                border,
                user_data,
            ))
        }
    }
    /// Appends a spacer child to the sizer.
    ///
    /// [See `wxSizer::Add()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#aad586833eef441a153f93628d8cca300)
    fn add_int_int<O: ObjectMethods>(
        &self,
        width: c_int,
        height: c_int,
        proportion: c_int,
        flag: c_int,
        border: c_int,
        user_data: Option<&O>,
    ) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            let user_data = match user_data {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            SizerItem::option_from(ffi::wxSizer_Add4(
                self.as_ptr(),
                width,
                height,
                proportion,
                flag,
                border,
                user_data,
            ))
        }
    }
    /// Appends a spacer child to the sizer.
    ///
    /// [See `wxSizer::Add()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a1fe783c68066d8f6b1f946f8c1a7c814)
    fn add_int_sizerflags<S: SizerFlagsMethods>(
        &self,
        width: c_int,
        height: c_int,
        flags: &S,
    ) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            let flags = flags.as_ptr();
            SizerItem::option_from(ffi::wxSizer_Add5(self.as_ptr(), width, height, flags))
        }
    }
    ///
    /// [See `wxSizer::Add()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#af5d3f5a214bcd155c5c00d65aece4349)
    fn add_sizeritem<S: SizerItemMethods>(
        &self,
        item: Option<&S>,
    ) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            let item = match item {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            SizerItem::option_from(ffi::wxSizer_Add6(self.as_ptr(), item))
        }
    }
    /// This base function adds non-stretchable space to both the horizontal and vertical orientation of the sizer.
    ///
    /// [See `wxSizer::AddSpacer()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a977375e316bc8bd2b3ea79f631906906)
    fn add_spacer(&self, size: c_int) -> Option<SizerItemIsOwned<false>> {
        unsafe { SizerItem::option_from(ffi::wxSizer_AddSpacer(self.as_ptr(), size)) }
    }
    /// Adds stretchable space to the sizer.
    ///
    /// [See `wxSizer::AddStretchSpacer()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#ae293edd7b7ee07b713ed83cd258b7f18)
    fn add_stretch_spacer(&self, prop: c_int) -> Option<SizerItemIsOwned<false>> {
        unsafe { SizerItem::option_from(ffi::wxSizer_AddStretchSpacer(self.as_ptr(), prop)) }
    }
    /// This method is abstract and has to be overwritten by any derived class.
    ///
    /// [See `wxSizer::CalcMin()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a371b9b72e55c1fedfbea9d298bc2df77)
    fn calc_min(&self) -> Size {
        unsafe { Size::from_ptr(ffi::wxSizer_CalcMin(self.as_ptr())) }
    }
    /// Detaches all children from the sizer.
    ///
    /// [See `wxSizer::Clear()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a5909429d14de1baf1b832d5c1abf7821)
    fn clear(&self, delete_windows: bool) {
        unsafe { ffi::wxSizer_Clear(self.as_ptr(), delete_windows) }
    }
    /// Computes client area size for window so that it matches the sizer's minimal size.
    ///
    /// [See `wxSizer::ComputeFittingClientSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a0da5d65c9b4192bd24cc3feb1be69e59)
    fn compute_fitting_client_size<W: WindowMethods>(&self, window: Option<&W>) -> Size {
        unsafe {
            let window = match window {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            Size::from_ptr(ffi::wxSizer_ComputeFittingClientSize(self.as_ptr(), window))
        }
    }
    /// Like ComputeFittingClientSize(), but converts the result into window size.
    ///
    /// [See `wxSizer::ComputeFittingWindowSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a3056cb4d47ea296e095b6cbc35d61155)
    fn compute_fitting_window_size<W: WindowMethods>(&self, window: Option<&W>) -> Size {
        unsafe {
            let window = match window {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            Size::from_ptr(ffi::wxSizer_ComputeFittingWindowSize(self.as_ptr(), window))
        }
    }
    /// Detach the child window from the sizer without destroying it.
    ///
    /// [See `wxSizer::Detach()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a362d7d556185fe9cd1b5d24004b86518)
    fn detach_window<W: WindowMethods>(&self, window: Option<&W>) -> bool {
        unsafe {
            let window = match window {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSizer_Detach(self.as_ptr(), window)
        }
    }
    /// Detach the child sizer from the sizer without destroying it.
    ///
    /// [See `wxSizer::Detach()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a0283dc800bd1c03cd10d437cef240791)
    fn detach_sizer<S: SizerMethods>(&self, sizer: Option<&S>) -> bool {
        unsafe {
            let sizer = match sizer {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSizer_Detach1(self.as_ptr(), sizer)
        }
    }
    /// Detach an item at position index from the sizer without destroying it.
    ///
    /// [See `wxSizer::Detach()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#aef45062fe9096f2c48c20d8ae3ad6476)
    fn detach_int(&self, index: c_int) -> bool {
        unsafe { ffi::wxSizer_Detach2(self.as_ptr(), index) }
    }
    /// Tell the sizer to resize the window so that its client area matches the sizer's minimal size (ComputeFittingClientSize() is called to determine it).
    ///
    /// [See `wxSizer::Fit()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#abad9cedc0cbe9ade2c799da23462d17e)
    fn fit<W: WindowMethods>(&self, window: Option<&W>) -> Size {
        unsafe {
            let window = match window {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            Size::from_ptr(ffi::wxSizer_Fit(self.as_ptr(), window))
        }
    }
    /// Tell the sizer to resize the virtual size of the window to match the sizer's minimal size.
    ///
    /// [See `wxSizer::FitInside()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a37904ed600fd389345295ff89aa09fdc)
    fn fit_inside<W: WindowMethods>(&self, window: Option<&W>) {
        unsafe {
            let window = match window {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSizer_FitInside(self.as_ptr(), window)
        }
    }
    /// Inform sizer about the first direction that has been decided (by parent item).
    ///
    /// [See `wxSizer::InformFirstDirection()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#ad0cc504036ef6c3a9d670dc3c98df3a5)
    fn inform_first_direction(
        &self,
        direction: c_int,
        size: c_int,
        available_other_dir: c_int,
    ) -> bool {
        unsafe {
            ffi::wxSizer_InformFirstDirection(self.as_ptr(), direction, size, available_other_dir)
        }
    }
    /// Returns the list of the items in this sizer.
    ///
    /// [See `wxSizer::GetChildren()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#aedb561084d239a2b2588de6c7de5cf69)
    fn get_children(&self) -> SizerItemListIsOwned<false> {
        unsafe { SizerItemListIsOwned::from_ptr(ffi::wxSizer_GetChildren(self.as_ptr())) }
    }
    // BLOCKED: fn GetChildren1()
    /// Returns the window this sizer is used in or NULL if none.
    ///
    /// [See `wxSizer::GetContainingWindow()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#ae277095953ca174b160d9cc494e196c4)
    fn get_containing_window(&self) -> WeakRef<Window> {
        unsafe { WeakRef::<Window>::from(ffi::wxSizer_GetContainingWindow(self.as_ptr())) }
    }
    /// Set the window this sizer is used in.
    ///
    /// [See `wxSizer::SetContainingWindow()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a687d055d72ff655c3e86a7010f16bfc6)
    fn set_containing_window<W: WindowMethods>(&self, window: Option<&W>) {
        unsafe {
            let window = match window {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSizer_SetContainingWindow(self.as_ptr(), window)
        }
    }
    /// Returns the number of items in the sizer.
    ///
    /// [See `wxSizer::GetItemCount()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#aa0713bbee5b28de3907c30ee39fbb02a)
    fn get_item_count(&self) -> usize {
        unsafe { ffi::wxSizer_GetItemCount(self.as_ptr()) }
    }
    /// Finds the wxSizerItem which holds the given window.
    ///
    /// [See `wxSizer::GetItem()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a950d20c339ade5c89e7dfec38eaafc34)
    fn get_item_window<W: WindowMethods>(
        &self,
        window: Option<&W>,
        recursive: bool,
    ) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            let window = match window {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            SizerItem::option_from(ffi::wxSizer_GetItem(self.as_ptr(), window, recursive))
        }
    }
    /// Finds the wxSizerItem which holds the given sizer.
    ///
    /// [See `wxSizer::GetItem()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a1b4ea149d002d6bfbf4926991b7074a5)
    fn get_item_sizer<S: SizerMethods>(
        &self,
        sizer: Option<&S>,
        recursive: bool,
    ) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            let sizer = match sizer {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            SizerItem::option_from(ffi::wxSizer_GetItem1(self.as_ptr(), sizer, recursive))
        }
    }
    /// Finds the wxSizerItem which is located in the sizer at position index.
    ///
    /// [See `wxSizer::GetItem()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a39af8068a1a84fde5f77791bd8ad1aa2)
    fn get_item_sz(&self, index: usize) -> Option<SizerItemIsOwned<false>> {
        unsafe { SizerItem::option_from(ffi::wxSizer_GetItem2(self.as_ptr(), index)) }
    }
    /// Finds the item in the sizer which has the given id.
    ///
    /// [See `wxSizer::GetItemById()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a7ef6aa595ad5ead57707cf1a02322976)
    fn get_item_by_id(&self, id: c_int, recursive: bool) -> Option<SizerItemIsOwned<false>> {
        unsafe { SizerItem::option_from(ffi::wxSizer_GetItemById(self.as_ptr(), id, recursive)) }
    }
    /// Returns the minimal size of the sizer.
    ///
    /// [See `wxSizer::GetMinSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a9fab8d16aefe347dbd57e0bdfe0d810d)
    fn get_min_size(&self) -> Size {
        unsafe { Size::from_ptr(ffi::wxSizer_GetMinSize(self.as_ptr())) }
    }
    /// Returns the current position of the sizer.
    ///
    /// [See `wxSizer::GetPosition()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a0385e13566110c773667171fd1850e86)
    fn get_position(&self) -> Point {
        unsafe { Point::from_ptr(ffi::wxSizer_GetPosition(self.as_ptr())) }
    }
    /// Returns the current size of the sizer.
    ///
    /// [See `wxSizer::GetSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a87a43be24ed2418705c6f4b9dceea893)
    fn get_size(&self) -> Size {
        unsafe { Size::from_ptr(ffi::wxSizer_GetSize(self.as_ptr())) }
    }
    /// Hides the child window.
    ///
    /// [See `wxSizer::Hide()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a317299431009a0adb4874f9c3f39ea8c)
    fn hide_window<W: WindowMethods>(&self, window: Option<&W>, recursive: bool) -> bool {
        unsafe {
            let window = match window {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSizer_Hide(self.as_ptr(), window, recursive)
        }
    }
    /// Hides the child sizer.
    ///
    /// [See `wxSizer::Hide()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#ae822dbd21860bfdbf7f76ca22cdcc1f4)
    fn hide_sizer<S: SizerMethods>(&self, sizer: Option<&S>, recursive: bool) -> bool {
        unsafe {
            let sizer = match sizer {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSizer_Hide1(self.as_ptr(), sizer, recursive)
        }
    }
    /// Hides the item at position index.
    ///
    /// [See `wxSizer::Hide()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a53c972f52267daea500d78f606fa0032)
    fn hide_sz(&self, index: usize) -> bool {
        unsafe { ffi::wxSizer_Hide2(self.as_ptr(), index) }
    }
    /// Insert a child into the sizer before any existing item at index.
    ///
    /// [See `wxSizer::Insert()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a8e1a98611cbe39c2996b54d266aac766)
    fn insert_window_sizerflags<W: WindowMethods, S: SizerFlagsMethods>(
        &self,
        index: usize,
        window: Option<&W>,
        flags: &S,
    ) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            let window = match window {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let flags = flags.as_ptr();
            SizerItem::option_from(ffi::wxSizer_Insert(self.as_ptr(), index, window, flags))
        }
    }
    /// Insert a child into the sizer before any existing item at index.
    ///
    /// [See `wxSizer::Insert()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#af79a2e39ad1a914598c0444ffe47abcb)
    fn insert_window_int<W: WindowMethods, O: ObjectMethods>(
        &self,
        index: usize,
        window: Option<&W>,
        proportion: c_int,
        flag: c_int,
        border: c_int,
        user_data: Option<&O>,
    ) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            let window = match window {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let user_data = match user_data {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            SizerItem::option_from(ffi::wxSizer_Insert1(
                self.as_ptr(),
                index,
                window,
                proportion,
                flag,
                border,
                user_data,
            ))
        }
    }
    /// Insert a child into the sizer before any existing item at index.
    ///
    /// [See `wxSizer::Insert()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a8c489859f49267529f3dc96b3906079e)
    fn insert_sizer_sizerflags<S: SizerMethods, S2: SizerFlagsMethods>(
        &self,
        index: usize,
        sizer: Option<&S>,
        flags: &S2,
    ) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            let sizer = match sizer {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let flags = flags.as_ptr();
            SizerItem::option_from(ffi::wxSizer_Insert2(self.as_ptr(), index, sizer, flags))
        }
    }
    /// Insert a child into the sizer before any existing item at index.
    ///
    /// [See `wxSizer::Insert()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a30100b24a1b6bd07e5f40f12f987f28d)
    fn insert_sizer_int<S: SizerMethods, O: ObjectMethods>(
        &self,
        index: usize,
        sizer: Option<&S>,
        proportion: c_int,
        flag: c_int,
        border: c_int,
        user_data: Option<&O>,
    ) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            let sizer = match sizer {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let user_data = match user_data {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            SizerItem::option_from(ffi::wxSizer_Insert3(
                self.as_ptr(),
                index,
                sizer,
                proportion,
                flag,
                border,
                user_data,
            ))
        }
    }
    /// Insert a child into the sizer before any existing item at index.
    ///
    /// [See `wxSizer::Insert()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a482d07c2578bed9a783405f16115aba0)
    fn insert_int_int<O: ObjectMethods>(
        &self,
        index: usize,
        width: c_int,
        height: c_int,
        proportion: c_int,
        flag: c_int,
        border: c_int,
        user_data: Option<&O>,
    ) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            let user_data = match user_data {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            SizerItem::option_from(ffi::wxSizer_Insert4(
                self.as_ptr(),
                index,
                width,
                height,
                proportion,
                flag,
                border,
                user_data,
            ))
        }
    }
    /// Insert a child into the sizer before any existing item at index.
    ///
    /// [See `wxSizer::Insert()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a63a518eb04f0880a73feb38be13692e6)
    fn insert_int_sizerflags<S: SizerFlagsMethods>(
        &self,
        index: usize,
        width: c_int,
        height: c_int,
        flags: &S,
    ) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            let flags = flags.as_ptr();
            SizerItem::option_from(ffi::wxSizer_Insert5(
                self.as_ptr(),
                index,
                width,
                height,
                flags,
            ))
        }
    }
    ///
    /// [See `wxSizer::Insert()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#afe255f89488cb6d22ebb2c20a4909b78)
    fn insert_sizeritem<S: SizerItemMethods>(
        &self,
        index: usize,
        item: Option<&S>,
    ) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            let item = match item {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            SizerItem::option_from(ffi::wxSizer_Insert6(self.as_ptr(), index, item))
        }
    }
    /// Inserts non-stretchable space to the sizer.
    ///
    /// [See `wxSizer::InsertSpacer()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a2f56855356271576aa79b6d94c84765a)
    fn insert_spacer(&self, index: usize, size: c_int) -> Option<SizerItemIsOwned<false>> {
        unsafe { SizerItem::option_from(ffi::wxSizer_InsertSpacer(self.as_ptr(), index, size)) }
    }
    /// Inserts stretchable space to the sizer.
    ///
    /// [See `wxSizer::InsertStretchSpacer()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#ac189f7dbb47d788111bf71bf7f67a46b)
    fn insert_stretch_spacer(&self, index: usize, prop: c_int) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            SizerItem::option_from(ffi::wxSizer_InsertStretchSpacer(self.as_ptr(), index, prop))
        }
    }
    /// Return true if the sizer has no elements.
    ///
    /// [See `wxSizer::IsEmpty()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a3ba6e0a275062895aa302fd4fbce690d)
    fn is_empty(&self) -> bool {
        unsafe { ffi::wxSizer_IsEmpty(self.as_ptr()) }
    }
    /// Returns true if the window is shown.
    ///
    /// [See `wxSizer::IsShown()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a1cd4eb1ae460664c825bbf953b5688b5)
    fn is_shown_window<W: WindowMethods>(&self, window: Option<&W>) -> bool {
        unsafe {
            let window = match window {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSizer_IsShown(self.as_ptr(), window)
        }
    }
    /// Returns true if the sizer is shown.
    ///
    /// [See `wxSizer::IsShown()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a2292cd9550f3fc6ca5a4ee81c901fb02)
    fn is_shown_sizer<S: SizerMethods>(&self, sizer: Option<&S>) -> bool {
        unsafe {
            let sizer = match sizer {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSizer_IsShown1(self.as_ptr(), sizer)
        }
    }
    /// Returns true if the item at index is shown.
    ///
    /// [See `wxSizer::IsShown()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a953e907dc34bf43913998cc33864c102)
    fn is_shown_sz(&self, index: usize) -> bool {
        unsafe { ffi::wxSizer_IsShown2(self.as_ptr(), index) }
    }
    /// Call this to force layout of the children anew, e.g. after having added a child to or removed a child (window, other sizer or space) from the sizer while keeping the current dimension.
    ///
    /// [See `wxSizer::Layout()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a1ea8589882944f8ac78b6ff8abde1554)
    fn layout(&self) {
        unsafe { ffi::wxSizer_Layout(self.as_ptr()) }
    }
    /// Same as Add(), but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer.
    ///
    /// [See `wxSizer::Prepend()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a1b1c6563e7736c4033dcd9cc6ce66e45)
    fn prepend_window_sizerflags<W: WindowMethods, S: SizerFlagsMethods>(
        &self,
        window: Option<&W>,
        flags: &S,
    ) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            let window = match window {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let flags = flags.as_ptr();
            SizerItem::option_from(ffi::wxSizer_Prepend(self.as_ptr(), window, flags))
        }
    }
    /// Same as Add(), but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer.
    ///
    /// [See `wxSizer::Prepend()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#ad3315e70b07379f47458374162e71c88)
    fn prepend_window_int<W: WindowMethods, O: ObjectMethods>(
        &self,
        window: Option<&W>,
        proportion: c_int,
        flag: c_int,
        border: c_int,
        user_data: Option<&O>,
    ) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            let window = match window {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let user_data = match user_data {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            SizerItem::option_from(ffi::wxSizer_Prepend1(
                self.as_ptr(),
                window,
                proportion,
                flag,
                border,
                user_data,
            ))
        }
    }
    /// Same as Add(), but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer.
    ///
    /// [See `wxSizer::Prepend()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#aee214096547fccf898e588518f02fa97)
    fn prepend_sizer_sizerflags<S: SizerMethods, S2: SizerFlagsMethods>(
        &self,
        sizer: Option<&S>,
        flags: &S2,
    ) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            let sizer = match sizer {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let flags = flags.as_ptr();
            SizerItem::option_from(ffi::wxSizer_Prepend2(self.as_ptr(), sizer, flags))
        }
    }
    /// Same as Add(), but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer.
    ///
    /// [See `wxSizer::Prepend()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a27fe4549d3e7acffeea6dad9bf47958e)
    fn prepend_sizer_int<S: SizerMethods, O: ObjectMethods>(
        &self,
        sizer: Option<&S>,
        proportion: c_int,
        flag: c_int,
        border: c_int,
        user_data: Option<&O>,
    ) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            let sizer = match sizer {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let user_data = match user_data {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            SizerItem::option_from(ffi::wxSizer_Prepend3(
                self.as_ptr(),
                sizer,
                proportion,
                flag,
                border,
                user_data,
            ))
        }
    }
    /// Same as Add(), but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer.
    ///
    /// [See `wxSizer::Prepend()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a1bc30427bca1051b2b01cfdb6dd2fc8c)
    fn prepend_int_int<O: ObjectMethods>(
        &self,
        width: c_int,
        height: c_int,
        proportion: c_int,
        flag: c_int,
        border: c_int,
        user_data: Option<&O>,
    ) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            let user_data = match user_data {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            SizerItem::option_from(ffi::wxSizer_Prepend4(
                self.as_ptr(),
                width,
                height,
                proportion,
                flag,
                border,
                user_data,
            ))
        }
    }
    /// Same as Add(), but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer.
    ///
    /// [See `wxSizer::Prepend()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#ab7f06bbbbf536c7fe25e7ff32e5233bc)
    fn prepend_int_sizerflags<S: SizerFlagsMethods>(
        &self,
        width: c_int,
        height: c_int,
        flags: &S,
    ) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            let flags = flags.as_ptr();
            SizerItem::option_from(ffi::wxSizer_Prepend5(self.as_ptr(), width, height, flags))
        }
    }
    ///
    /// [See `wxSizer::Prepend()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a0b2de360c9b2854f2d23610d1f35707f)
    fn prepend_sizeritem<S: SizerItemMethods>(
        &self,
        item: Option<&S>,
    ) -> Option<SizerItemIsOwned<false>> {
        unsafe {
            let item = match item {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            SizerItem::option_from(ffi::wxSizer_Prepend6(self.as_ptr(), item))
        }
    }
    /// Prepends non-stretchable space to the sizer.
    ///
    /// [See `wxSizer::PrependSpacer()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a0075b0322c99b9b7539db50df1d375db)
    fn prepend_spacer(&self, size: c_int) -> Option<SizerItemIsOwned<false>> {
        unsafe { SizerItem::option_from(ffi::wxSizer_PrependSpacer(self.as_ptr(), size)) }
    }
    /// Prepends stretchable space to the sizer.
    ///
    /// [See `wxSizer::PrependStretchSpacer()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#afbedb412e858da8615f4535ae803dbd4)
    fn prepend_stretch_spacer(&self, prop: c_int) -> Option<SizerItemIsOwned<false>> {
        unsafe { SizerItem::option_from(ffi::wxSizer_PrependStretchSpacer(self.as_ptr(), prop)) }
    }
    /// Method which must be overridden in the derived sizer classes.
    ///
    /// [See `wxSizer::RepositionChildren()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a01d85c84dc9bf2e1d40f114cd89f3b8e)
    fn reposition_children<S: SizeMethods>(&self, min_size: &S) {
        unsafe {
            let min_size = min_size.as_ptr();
            ffi::wxSizer_RepositionChildren(self.as_ptr(), min_size)
        }
    }
    // BLOCKED: fn Remove()
    /// Removes a sizer child from the sizer and destroys it.
    ///
    /// [See `wxSizer::Remove()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a7fce6ce0e986e00e6702914436b6191a)
    fn remove_sizer<S: SizerMethods>(&self, sizer: Option<&S>) -> bool {
        unsafe {
            let sizer = match sizer {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSizer_Remove1(self.as_ptr(), sizer)
        }
    }
    /// Removes a child from the sizer and destroys it if it is a sizer or a spacer, but not if it is a window (because windows are owned by their parent window, not the sizer).
    ///
    /// [See `wxSizer::Remove()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#accad1425ce5f2504fb63d2801b5b85e1)
    fn remove_int(&self, index: c_int) -> bool {
        unsafe { ffi::wxSizer_Remove2(self.as_ptr(), index) }
    }
    /// Detaches the given oldwin from the sizer and replaces it with the given newwin.
    ///
    /// [See `wxSizer::Replace()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#ade62512b74abfa0c6ff45825ea0c9d9d)
    fn replace_window<W: WindowMethods, W2: WindowMethods>(
        &self,
        oldwin: Option<&W>,
        newwin: Option<&W2>,
        recursive: bool,
    ) -> bool {
        unsafe {
            let oldwin = match oldwin {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let newwin = match newwin {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSizer_Replace(self.as_ptr(), oldwin, newwin, recursive)
        }
    }
    /// Detaches the given oldsz from the sizer and replaces it with the given newsz.
    ///
    /// [See `wxSizer::Replace()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a842fc94c0f5e58597216cb952e044509)
    fn replace_sizer<S: SizerMethods, S2: SizerMethods>(
        &self,
        oldsz: Option<&S>,
        newsz: Option<&S2>,
        recursive: bool,
    ) -> bool {
        unsafe {
            let oldsz = match oldsz {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let newsz = match newsz {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSizer_Replace1(self.as_ptr(), oldsz, newsz, recursive)
        }
    }
    /// Detaches the given item at position index from the sizer and replaces it with the given wxSizerItem newitem.
    ///
    /// [See `wxSizer::Replace()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a5283d4d5fd059cea93e9401e3708f294)
    fn replace_sz<S: SizerItemMethods>(&self, index: usize, newitem: Option<&S>) -> bool {
        unsafe {
            let newitem = match newitem {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSizer_Replace2(self.as_ptr(), index, newitem)
        }
    }
    /// Call this to force the sizer to take the given dimension and thus force the items owned by the sizer to resize themselves according to the rules defined by the parameter in the Add() and Prepend() methods.
    ///
    /// [See `wxSizer::SetDimension()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a3c5483afdc5b5b5657548e190226f285)
    fn set_dimension_int(&self, x: c_int, y: c_int, width: c_int, height: c_int) {
        unsafe { ffi::wxSizer_SetDimension(self.as_ptr(), x, y, width, height) }
    }
    /// This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
    ///
    /// [See `wxSizer::SetDimension()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#aa993f4a4534bd4dd24c801bfda6da224)
    fn set_dimension_point<P: PointMethods, S: SizeMethods>(&self, pos: &P, size: &S) {
        unsafe {
            let pos = pos.as_ptr();
            let size = size.as_ptr();
            ffi::wxSizer_SetDimension1(self.as_ptr(), pos, size)
        }
    }
    /// Set an item's minimum size by window, sizer, or position.
    ///
    /// [See `wxSizer::SetItemMinSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a26fc90231667639d5af7c2f8f7b75c80)
    fn set_item_min_size_window_int<W: WindowMethods>(
        &self,
        window: Option<&W>,
        width: c_int,
        height: c_int,
    ) -> bool {
        unsafe {
            let window = match window {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSizer_SetItemMinSize(self.as_ptr(), window, width, height)
        }
    }
    ///
    /// [See `wxSizer::SetItemMinSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a486d80e43e6cbd8fea5fa2879d111071)
    fn set_item_min_size_window_size<W: WindowMethods, S: SizeMethods>(
        &self,
        window: Option<&W>,
        size: &S,
    ) -> bool {
        unsafe {
            let window = match window {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let size = size.as_ptr();
            ffi::wxSizer_SetItemMinSize1(self.as_ptr(), window, size)
        }
    }
    ///
    /// [See `wxSizer::SetItemMinSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a8e4230a56ca442a3eb3577f6c47094d4)
    fn set_item_min_size_sizer_int<S: SizerMethods>(
        &self,
        sizer: Option<&S>,
        width: c_int,
        height: c_int,
    ) -> bool {
        unsafe {
            let sizer = match sizer {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSizer_SetItemMinSize2(self.as_ptr(), sizer, width, height)
        }
    }
    ///
    /// [See `wxSizer::SetItemMinSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a9941c644acf3b215678cea0ea15aeec0)
    fn set_item_min_size_sizer_size<S: SizerMethods, S2: SizeMethods>(
        &self,
        sizer: Option<&S>,
        size: &S2,
    ) -> bool {
        unsafe {
            let sizer = match sizer {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let size = size.as_ptr();
            ffi::wxSizer_SetItemMinSize3(self.as_ptr(), sizer, size)
        }
    }
    ///
    /// [See `wxSizer::SetItemMinSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#aae51219b9dfd74c3af5823e39f558ed4)
    fn set_item_min_size_sz_int(&self, index: usize, width: c_int, height: c_int) -> bool {
        unsafe { ffi::wxSizer_SetItemMinSize4(self.as_ptr(), index, width, height) }
    }
    ///
    /// [See `wxSizer::SetItemMinSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#abc7a754f4a12f80025fad0d131082fbb)
    fn set_item_min_size_sz_size<S: SizeMethods>(&self, index: usize, size: &S) -> bool {
        unsafe {
            let size = size.as_ptr();
            ffi::wxSizer_SetItemMinSize5(self.as_ptr(), index, size)
        }
    }
    /// Call this to give the sizer a minimal size.
    ///
    /// [See `wxSizer::SetMinSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a97bbbf3ee6e55c321d7bb72b4c1b7d79)
    fn set_min_size_size<S: SizeMethods>(&self, size: &S) {
        unsafe {
            let size = size.as_ptr();
            ffi::wxSizer_SetMinSize(self.as_ptr(), size)
        }
    }
    /// This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
    ///
    /// [See `wxSizer::SetMinSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a0e89f59e611c0279e8bee1b7ee345446)
    fn set_min_size_int(&self, width: c_int, height: c_int) {
        unsafe { ffi::wxSizer_SetMinSize1(self.as_ptr(), width, height) }
    }
    /// This method first calls Fit() and then wxTopLevelWindow::SetSizeHints() on the window passed to it.
    ///
    /// [See `wxSizer::SetSizeHints()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#abc460cd0e2bb3bde72142fdb434bc546)
    fn set_size_hints<W: WindowMethods>(&self, window: Option<&W>) {
        unsafe {
            let window = match window {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSizer_SetSizeHints(self.as_ptr(), window)
        }
    }
    // BLOCKED: fn SetVirtualSizeHints()
    /// Shows or hides the window.
    ///
    /// [See `wxSizer::Show()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#afb6638468fe2253d1870b4d387c57a0b)
    fn show_window<W: WindowMethods>(
        &self,
        window: Option<&W>,
        show: bool,
        recursive: bool,
    ) -> bool {
        unsafe {
            let window = match window {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSizer_Show(self.as_ptr(), window, show, recursive)
        }
    }
    /// Shows or hides sizer.
    ///
    /// [See `wxSizer::Show()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a65289f40a39fb31512f93d8d7f63720e)
    fn show_sizer<S: SizerMethods>(&self, sizer: Option<&S>, show: bool, recursive: bool) -> bool {
        unsafe {
            let sizer = match sizer {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSizer_Show1(self.as_ptr(), sizer, show, recursive)
        }
    }
    /// Shows the item at index.
    ///
    /// [See `wxSizer::Show()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a15f781b11cbe978d6fbc0b62f32bc3b4)
    fn show_sz(&self, index: usize, show: bool) -> bool {
        unsafe { ffi::wxSizer_Show2(self.as_ptr(), index, show) }
    }
    /// Show or hide all items managed by the sizer.
    ///
    /// [See `wxSizer::ShowItems()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer.html#a95533b38ceb29ddbaf902f4bf680daa6)
    fn show_items(&self, show: bool) {
        unsafe { ffi::wxSizer_ShowItems(self.as_ptr(), show) }
    }
}

// wxSizerFlags
/// This trait represents C++ [`wxSizerFlags`](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html) class's methods and inheritance.
///
/// See [`SizerFlagsIsOwned`] documentation for the class usage.
pub trait SizerFlagsMethods: WxRustMethods {
    /// Sets the alignment of this wxSizerFlags to align.
    ///
    /// [See `wxSizerFlags::Align()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html#a2bbd830e81b25fa8292c2444af9c36c4)
    fn align(&self, alignment: c_int) -> &Self {
        unsafe {
            ffi::wxSizerFlags_Align(self.as_ptr(), alignment);
            &self
        }
    }
    /// Sets the wxSizerFlags to have a border of a number of pixels specified by borderinpixels with the directions specified by direction.
    ///
    /// [See `wxSizerFlags::Border()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html#a3a367aa365799796cf325a5801a97928)
    fn border_int(&self, direction: c_int, borderinpixels: c_int) -> &Self {
        unsafe {
            ffi::wxSizerFlags_Border(self.as_ptr(), direction, borderinpixels);
            &self
        }
    }
    /// Sets the wxSizerFlags to have a border with size as returned by GetDefaultBorder().
    ///
    /// [See `wxSizerFlags::Border()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html#aa4e78c3329ba5bd7483bb7a4696df37a)
    fn border(&self, direction: c_int) -> &Self {
        unsafe {
            ffi::wxSizerFlags_Border1(self.as_ptr(), direction);
            &self
        }
    }
    /// Aligns the object to the bottom, similar for Align(wxALIGN_BOTTOM).
    ///
    /// [See `wxSizerFlags::Bottom()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html#ab37c9c7e412762388afa13af5b8fe5fe)
    fn bottom(&self) -> &Self {
        unsafe {
            ffi::wxSizerFlags_Bottom(self.as_ptr());
            &self
        }
    }
    /// Sets the object of the wxSizerFlags to center itself in the area it is given.
    ///
    /// [See `wxSizerFlags::Center()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html#a8ac23ffba207d192f57db30474291c2a)
    fn center(&self) -> &Self {
        unsafe {
            ffi::wxSizerFlags_Center(self.as_ptr());
            &self
        }
    }
    /// Center() for people with the other dialect of English.
    ///
    /// [See `wxSizerFlags::Centre()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html#a4ee7b5fab741d007042985a25d03336c)
    fn centre(&self) -> &Self {
        unsafe {
            ffi::wxSizerFlags_Centre(self.as_ptr());
            &self
        }
    }
    /// Same as CentreHorizontal().
    ///
    /// [See `wxSizerFlags::CenterHorizontal()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html#a1df02d1bed77077ece7315cfd8ceb4bc)
    fn center_horizontal(&self) -> &Self {
        unsafe {
            ffi::wxSizerFlags_CenterHorizontal(self.as_ptr());
            &self
        }
    }
    /// Same as CentreVertical().
    ///
    /// [See `wxSizerFlags::CenterVertical()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html#a8ba7dd5a8c8b0584fb8c4f3c465392d0)
    fn center_vertical(&self) -> &Self {
        unsafe {
            ffi::wxSizerFlags_CenterVertical(self.as_ptr());
            &self
        }
    }
    /// Center an item only in horizontal direction.
    ///
    /// [See `wxSizerFlags::CentreHorizontal()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html#a70ab06220c199b9d2a3997f0e531205e)
    fn centre_horizontal(&self) -> &Self {
        unsafe {
            ffi::wxSizerFlags_CentreHorizontal(self.as_ptr());
            &self
        }
    }
    /// Center an item only in vertical direction.
    ///
    /// [See `wxSizerFlags::CentreVertical()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html#abe8a93f880cc1f893c97794c2b7183dc)
    fn centre_vertical(&self) -> &Self {
        unsafe {
            ffi::wxSizerFlags_CentreVertical(self.as_ptr());
            &self
        }
    }
    /// Sets the border in the given direction having twice the default border size.
    ///
    /// [See `wxSizerFlags::DoubleBorder()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html#a218ab5aab969806da54f6f38e94bef48)
    fn double_border(&self, direction: c_int) -> &Self {
        unsafe {
            ffi::wxSizerFlags_DoubleBorder(self.as_ptr(), direction);
            &self
        }
    }
    /// Sets the border in left and right directions having twice the default border size.
    ///
    /// [See `wxSizerFlags::DoubleHorzBorder()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html#a9ab007933b7dc0489828f490d84dd942)
    fn double_horz_border(&self) -> &Self {
        unsafe {
            ffi::wxSizerFlags_DoubleHorzBorder(self.as_ptr());
            &self
        }
    }
    /// Sets the object of the wxSizerFlags to expand to fill as much area as it can.
    ///
    /// [See `wxSizerFlags::Expand()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html#a1e097af6d5368190a7bf04a71de6b2fb)
    fn expand(&self) -> &Self {
        unsafe {
            ffi::wxSizerFlags_Expand(self.as_ptr());
            &self
        }
    }
    /// Set the wxFIXED_MINSIZE flag which indicates that the initial size of the window should be also set as its minimal size.
    ///
    /// [See `wxSizerFlags::FixedMinSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html#a98161a575e02263bccaf7a14bc4313d4)
    fn fixed_min_size(&self) -> &Self {
        unsafe {
            ffi::wxSizerFlags_FixedMinSize(self.as_ptr());
            &self
        }
    }
    /// Set the wxRESERVE_SPACE_EVEN_IF_HIDDEN flag.
    ///
    /// [See `wxSizerFlags::ReserveSpaceEvenIfHidden()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html#a8027f21a783c3974d1bd3d61d9d42512)
    fn reserve_space_even_if_hidden(&self) -> &Self {
        unsafe {
            ffi::wxSizerFlags_ReserveSpaceEvenIfHidden(self.as_ptr());
            &self
        }
    }
    /// Aligns the object to the left, similar for Align(wxALIGN_LEFT).
    ///
    /// [See `wxSizerFlags::Left()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html#ad9ded2670ba35e0495640b3477e23792)
    fn left(&self) -> &Self {
        unsafe {
            ffi::wxSizerFlags_Left(self.as_ptr());
            &self
        }
    }
    /// Sets the proportion of this wxSizerFlags to proportion.
    ///
    /// [See `wxSizerFlags::Proportion()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html#a4a5177a59b6e78f59efac209128a1145)
    fn proportion(&self, proportion: c_int) -> &Self {
        unsafe {
            ffi::wxSizerFlags_Proportion(self.as_ptr(), proportion);
            &self
        }
    }
    /// Aligns the object to the right, similar for Align(wxALIGN_RIGHT).
    ///
    /// [See `wxSizerFlags::Right()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html#abf5fb1916713e4aba993ba244b4e2859)
    fn right(&self) -> &Self {
        unsafe {
            ffi::wxSizerFlags_Right(self.as_ptr());
            &self
        }
    }
    /// Set the wx_SHAPED flag which indicates that the elements should always keep the fixed width to height ratio equal to its original value.
    ///
    /// [See `wxSizerFlags::Shaped()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html#ad4a96957c77dcf6253cc4e30497b1c97)
    fn shaped(&self) -> &Self {
        unsafe {
            ffi::wxSizerFlags_Shaped(self.as_ptr());
            &self
        }
    }
    /// Aligns the object to the top, similar for Align(wxALIGN_TOP).
    ///
    /// [See `wxSizerFlags::Top()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html#aaa3cd4b08d12b0e105ed93b19b458e07)
    fn top(&self) -> &Self {
        unsafe {
            ffi::wxSizerFlags_Top(self.as_ptr());
            &self
        }
    }
    /// Sets the border in the given direction having thrice the default border size.
    ///
    /// [See `wxSizerFlags::TripleBorder()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html#aebe99ddd8b44dfe89efc91ce186466ff)
    fn triple_border(&self, direction: c_int) -> &Self {
        unsafe {
            ffi::wxSizerFlags_TripleBorder(self.as_ptr(), direction);
            &self
        }
    }
    /// Globally disable checks for sizer flag consistency in debug builds.
    ///
    /// [See `wxSizerFlags::DisableConsistencyChecks()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html#a6c99f94314f84fc8c78cd1d9345b9950)
    fn disable_consistency_checks() {
        unsafe { ffi::wxSizerFlags_DisableConsistencyChecks() }
    }
    /// Returns the border used by default in Border() method.
    ///
    /// [See `wxSizerFlags::GetDefaultBorder()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_flags.html#a0766441261548fe6683fcbe411dca7fb)
    fn get_default_border() -> c_int {
        unsafe { ffi::wxSizerFlags_GetDefaultBorder() }
    }
    // NOT_SUPPORTED: fn GetDefaultBorderFractional()
}

// wxSizerItem
/// This trait represents C++ [`wxSizerItem`](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html) class's methods and inheritance.
///
/// See [`SizerItemIsOwned`] documentation for the class usage.
pub trait SizerItemMethods: ObjectMethods {
    // DTOR: fn ~wxSizerItem()
    /// Set the window to be tracked by this item.
    ///
    /// [See `wxSizerItem::AssignWindow()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#a4dbc6292038eb7de978be98f8a4f802e)
    fn assign_window<W: WindowMethods>(&self, window: Option<&W>) {
        unsafe {
            let window = match window {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSizerItem_AssignWindow(self.as_ptr(), window)
        }
    }
    /// Set the sizer tracked by this item.
    ///
    /// [See `wxSizerItem::AssignSizer()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#adfbb98b4173df43be52d9c25d4f842b4)
    fn assign_sizer<S: SizerMethods>(&self, sizer: Option<&S>) {
        unsafe {
            let sizer = match sizer {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSizerItem_AssignSizer(self.as_ptr(), sizer)
        }
    }
    /// Set the size of the spacer tracked by this item.
    ///
    /// [See `wxSizerItem::AssignSpacer()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#ad6e478ed2a645b8f18642d7d3194278a)
    fn assign_spacer_size<S: SizeMethods>(&self, size: &S) {
        unsafe {
            let size = size.as_ptr();
            ffi::wxSizerItem_AssignSpacer(self.as_ptr(), size)
        }
    }
    ///
    /// [See `wxSizerItem::AssignSpacer()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#ac558c9e0615222292ba798963bb65286)
    fn assign_spacer_int(&self, w: c_int, h: c_int) {
        unsafe { ffi::wxSizerItem_AssignSpacer1(self.as_ptr(), w, h) }
    }
    /// Calculates the minimum desired size for the item, including any space needed by borders.
    ///
    /// [See `wxSizerItem::CalcMin()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#adcb05eea89effd217d5f3431e6064c36)
    fn calc_min(&self) -> Size {
        unsafe { Size::from_ptr(ffi::wxSizerItem_CalcMin(self.as_ptr())) }
    }
    /// Destroy the window or the windows in a subsizer, depending on the type of item.
    ///
    /// [See `wxSizerItem::DeleteWindows()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#aa1bc12b256f01f8faee2b046415e4e82)
    fn delete_windows(&self) {
        unsafe { ffi::wxSizerItem_DeleteWindows(self.as_ptr()) }
    }
    /// Enable deleting the SizerItem without destroying the contained sizer.
    ///
    /// [See `wxSizerItem::DetachSizer()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#a0b6971d562afba609a310828fdc53f03)
    fn detach_sizer(&self) {
        unsafe { ffi::wxSizerItem_DetachSizer(self.as_ptr()) }
    }
    /// Return the border attribute.
    ///
    /// [See `wxSizerItem::GetBorder()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#a3b66f4ee5135370877029422eafc474e)
    fn get_border(&self) -> c_int {
        unsafe { ffi::wxSizerItem_GetBorder(self.as_ptr()) }
    }
    /// Return the flags attribute.
    ///
    /// [See `wxSizerItem::GetFlag()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#a5a99cd5eb590c452319bdc50c34f8c27)
    fn get_flag(&self) -> c_int {
        unsafe { ffi::wxSizerItem_GetFlag(self.as_ptr()) }
    }
    /// Return the numeric id of wxSizerItem, or wxID_NONE if the id has not been set.
    ///
    /// [See `wxSizerItem::GetId()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#a5a6a93ac781afdc146ae1b333624365d)
    fn get_id(&self) -> c_int {
        unsafe { ffi::wxSizerItem_GetId(self.as_ptr()) }
    }
    /// Get the minimum size needed for the item.
    ///
    /// [See `wxSizerItem::GetMinSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#a310c33e0cd867e6ef4f825c0595ad797)
    fn get_min_size(&self) -> Size {
        unsafe { Size::from_ptr(ffi::wxSizerItem_GetMinSize(self.as_ptr())) }
    }
    /// Sets the minimum size to be allocated for this item.
    ///
    /// [See `wxSizerItem::SetMinSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#ae81527c4eae65c1bdc491309df643d07)
    fn set_min_size_size<S: SizeMethods>(&self, size: &S) {
        unsafe {
            let size = size.as_ptr();
            ffi::wxSizerItem_SetMinSize(self.as_ptr(), size)
        }
    }
    /// This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
    ///
    /// [See `wxSizerItem::SetMinSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#ab989d3ce6d529c50dea6675454c1ab97)
    fn set_min_size_int(&self, x: c_int, y: c_int) {
        unsafe { ffi::wxSizerItem_SetMinSize1(self.as_ptr(), x, y) }
    }
    /// What is the current position of the item, as set in the last Layout.
    ///
    /// [See `wxSizerItem::GetPosition()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#afa84054e9e67aec9069e49a11abe39b2)
    fn get_position(&self) -> Point {
        unsafe { Point::from_ptr(ffi::wxSizerItem_GetPosition(self.as_ptr())) }
    }
    /// Get the proportion item attribute.
    ///
    /// [See `wxSizerItem::GetProportion()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#ad7db692d3831769a6a5c36dc0ee8e9f4)
    fn get_proportion(&self) -> c_int {
        unsafe { ffi::wxSizerItem_GetProportion(self.as_ptr()) }
    }
    // NOT_SUPPORTED: fn GetRatio()
    /// Get the rectangle of the item on the parent window, excluding borders.
    ///
    /// [See `wxSizerItem::GetRect()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#a3c3a8e59193eb64cb6cf1e120c9ed544)
    fn get_rect(&self) -> Rect {
        unsafe { Rect::from_ptr(ffi::wxSizerItem_GetRect(self.as_ptr())) }
    }
    /// Get the current size of the item, as set in the last Layout.
    ///
    /// [See `wxSizerItem::GetSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#a6323e61953ac01ea0953cb4e8e2cc89d)
    fn get_size(&self) -> Size {
        unsafe { Size::from_ptr(ffi::wxSizerItem_GetSize(self.as_ptr())) }
    }
    /// If this item is tracking a sizer, return it.
    ///
    /// [See `wxSizerItem::GetSizer()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#a36f107f2c1298471facd1e040f3ac7e8)
    fn get_sizer(&self) -> Option<SizerIsOwned<false>> {
        unsafe { Sizer::option_from(ffi::wxSizerItem_GetSizer(self.as_ptr())) }
    }
    /// If this item is tracking a spacer, return its size.
    ///
    /// [See `wxSizerItem::GetSpacer()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#a7026dd9e204575696f13950e313e52d2)
    fn get_spacer(&self) -> Size {
        unsafe { Size::from_ptr(ffi::wxSizerItem_GetSpacer(self.as_ptr())) }
    }
    /// Get the userData item attribute.
    ///
    /// [See `wxSizerItem::GetUserData()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#a54c2cebf0aba71694eefe2a39759f1e2)
    fn get_user_data(&self) -> Option<ObjectIsOwned<false>> {
        unsafe { Object::option_from(ffi::wxSizerItem_GetUserData(self.as_ptr())) }
    }
    /// If this item is tracking a window then return it.
    ///
    /// [See `wxSizerItem::GetWindow()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#a641c636f23a6671c5675d2aa65b8ed8c)
    fn get_window(&self) -> WeakRef<Window> {
        unsafe { WeakRef::<Window>::from(ffi::wxSizerItem_GetWindow(self.as_ptr())) }
    }
    /// Returns true if this item is a window or a spacer and it is shown or if this item is a sizer and not all of its elements are hidden.
    ///
    /// [See `wxSizerItem::IsShown()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#ac420ca8195328c899d3c4ffc482d177e)
    fn is_shown(&self) -> bool {
        unsafe { ffi::wxSizerItem_IsShown(self.as_ptr()) }
    }
    /// Is this item a sizer?
    ///
    /// [See `wxSizerItem::IsSizer()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#a053daa7df2c1b9f879e7da9f354f5fa0)
    fn is_sizer(&self) -> bool {
        unsafe { ffi::wxSizerItem_IsSizer(self.as_ptr()) }
    }
    /// Is this item a spacer?
    ///
    /// [See `wxSizerItem::IsSpacer()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#a6491635b3097a7c83e71b70f72245cdc)
    fn is_spacer(&self) -> bool {
        unsafe { ffi::wxSizerItem_IsSpacer(self.as_ptr()) }
    }
    /// Is this item a window?
    ///
    /// [See `wxSizerItem::IsWindow()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#affa6c39cb63b2a6c7552919530d09729)
    fn is_window(&self) -> bool {
        unsafe { ffi::wxSizerItem_IsWindow(self.as_ptr()) }
    }
    /// Set the border item attribute.
    ///
    /// [See `wxSizerItem::SetBorder()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#af007095393ea60c2c2431e65ffe639db)
    fn set_border(&self, border: c_int) {
        unsafe { ffi::wxSizerItem_SetBorder(self.as_ptr(), border) }
    }
    /// Set the position and size of the space allocated to the sizer, and adjust the position and size of the item to be within that space taking alignment and borders into account.
    ///
    /// [See `wxSizerItem::SetDimension()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#a4fc9c5889185d1c06665f47112663a75)
    fn set_dimension<P: PointMethods, S: SizeMethods>(&self, pos: &P, size: &S) {
        unsafe {
            let pos = pos.as_ptr();
            let size = size.as_ptr();
            ffi::wxSizerItem_SetDimension(self.as_ptr(), pos, size)
        }
    }
    /// Set the flag item attribute.
    ///
    /// [See `wxSizerItem::SetFlag()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#aa6e15409d4dcdf01ba88d5f44a1aadfb)
    fn set_flag(&self, flag: c_int) {
        unsafe { ffi::wxSizerItem_SetFlag(self.as_ptr(), flag) }
    }
    /// Sets the numeric id of the wxSizerItem to id.
    ///
    /// [See `wxSizerItem::SetId()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#a14b3da2cb04b9096f5c8888ca90ab858)
    fn set_id(&self, id: c_int) {
        unsafe { ffi::wxSizerItem_SetId(self.as_ptr(), id) }
    }
    /// Sets the minimum size to be allocated for this item.
    ///
    /// [See `wxSizerItem::SetInitSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#a39ddf1d7da5982d6fc21e4b57db9bd61)
    fn set_init_size(&self, x: c_int, y: c_int) {
        unsafe { ffi::wxSizerItem_SetInitSize(self.as_ptr(), x, y) }
    }
    /// Set the proportion item attribute.
    ///
    /// [See `wxSizerItem::SetProportion()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#a7de372e08f991227d4105d24051d04a7)
    fn set_proportion(&self, proportion: c_int) {
        unsafe { ffi::wxSizerItem_SetProportion(self.as_ptr(), proportion) }
    }
    /// Set the ratio item attribute.
    ///
    /// [See `wxSizerItem::SetRatio()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#ae761aa97de98f606d86419dbced0672d)
    fn set_ratio(&self, width: c_int, height: c_int) {
        unsafe { ffi::wxSizerItem_SetRatio(self.as_ptr(), width, height) }
    }
    // BLOCKED: fn SetRatio1()
    // NOT_SUPPORTED: fn SetRatio2()
    // BLOCKED: fn SetSizer()
    // BLOCKED: fn SetSpacer()
    ///
    /// [See `wxSizerItem::SetUserData()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#a5dde3d0ca94189848ad4ece129d6937a)
    fn set_user_data<O: ObjectMethods>(&self, user_data: Option<&O>) {
        unsafe {
            let user_data = match user_data {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSizerItem_SetUserData(self.as_ptr(), user_data)
        }
    }
    // BLOCKED: fn SetWindow()
    /// Set the show item attribute, which sizers use to determine if the item is to be made part of the layout or not.
    ///
    /// [See `wxSizerItem::Show()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_sizer_item.html#a62baa1d528dabc001472de5b70786ac3)
    fn show(&self, show: bool) {
        unsafe { ffi::wxSizerItem_Show(self.as_ptr(), show) }
    }
}

// wxSlider
/// This trait represents C++ [`wxSlider`](https://docs.wxwidgets.org/3.2/classwx_slider.html) class's methods and inheritance.
///
/// See [`SliderIsOwned`] documentation for the class usage.
pub trait SliderMethods: ControlMethods {
    // DTOR: fn ~wxSlider()
    /// Clears the selection, for a slider with the wxSL_SELRANGE style.
    ///
    /// [See `wxSlider::ClearSel()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_slider.html#a6c13ab073bb392ca2e396611e5359899)
    fn clear_sel(&self) {
        unsafe { ffi::wxSlider_ClearSel(self.as_ptr()) }
    }
    /// Clears the ticks.
    ///
    /// [See `wxSlider::ClearTicks()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_slider.html#a05d72f8b25bd084ede2cda557cf4d234)
    fn clear_ticks(&self) {
        unsafe { ffi::wxSlider_ClearTicks(self.as_ptr()) }
    }
    /// Used for two-step slider construction.
    ///
    /// [See `wxSlider::Create()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_slider.html#a1034920c0cef6726d526461b475ac0e6)
    fn create_int<W: WindowMethods, P: PointMethods, S: SizeMethods, V: ValidatorMethods>(
        &self,
        parent: Option<&W>,
        id: c_int,
        value: c_int,
        min_value: c_int,
        max_value: c_int,
        point: &P,
        size: &S,
        style: c_long,
        validator: &V,
        name: &str,
    ) -> bool {
        unsafe {
            let parent = match parent {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let point = point.as_ptr();
            let size = size.as_ptr();
            let validator = validator.as_ptr();
            let name = WxString::from(name);
            let name = name.as_ptr();
            ffi::wxSlider_Create(
                self.as_ptr(),
                parent,
                id,
                value,
                min_value,
                max_value,
                point,
                size,
                style,
                validator,
                name,
            )
        }
    }
    /// Returns the line size.
    ///
    /// [See `wxSlider::GetLineSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_slider.html#ac7a969e3e366c46529c6570646ef8d39)
    fn get_line_size(&self) -> c_int {
        unsafe { ffi::wxSlider_GetLineSize(self.as_ptr()) }
    }
    /// Gets the maximum slider value.
    ///
    /// [See `wxSlider::GetMax()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_slider.html#a50ab7e16a5c5661b946e4f778506066e)
    fn get_max(&self) -> c_int {
        unsafe { ffi::wxSlider_GetMax(self.as_ptr()) }
    }
    /// Gets the minimum slider value.
    ///
    /// [See `wxSlider::GetMin()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_slider.html#aa8a1f60b126ae245a7d9466a9db29da6)
    fn get_min(&self) -> c_int {
        unsafe { ffi::wxSlider_GetMin(self.as_ptr()) }
    }
    /// Returns the page size.
    ///
    /// [See `wxSlider::GetPageSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_slider.html#a4af8474b2fc0ad02efdad42b3a7c344c)
    fn get_page_size(&self) -> c_int {
        unsafe { ffi::wxSlider_GetPageSize(self.as_ptr()) }
    }
    /// Returns the selection end point.
    ///
    /// [See `wxSlider::GetSelEnd()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_slider.html#a4873cd3721d82c292c40de3c5359e6b9)
    fn get_sel_end(&self) -> c_int {
        unsafe { ffi::wxSlider_GetSelEnd(self.as_ptr()) }
    }
    /// Returns the selection start point.
    ///
    /// [See `wxSlider::GetSelStart()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_slider.html#a29b6a7702d276360ca15f3ecc96bf78f)
    fn get_sel_start(&self) -> c_int {
        unsafe { ffi::wxSlider_GetSelStart(self.as_ptr()) }
    }
    /// Returns the thumb length.
    ///
    /// [See `wxSlider::GetThumbLength()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_slider.html#a15f8fa5102cca29a90868555826c32ab)
    fn get_thumb_length(&self) -> c_int {
        unsafe { ffi::wxSlider_GetThumbLength(self.as_ptr()) }
    }
    /// Returns the tick frequency.
    ///
    /// [See `wxSlider::GetTickFreq()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_slider.html#a60bd5a7d077f9aa71301777f247b8f3c)
    fn get_tick_freq(&self) -> c_int {
        unsafe { ffi::wxSlider_GetTickFreq(self.as_ptr()) }
    }
    /// Gets the current slider value.
    ///
    /// [See `wxSlider::GetValue()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_slider.html#adb437e78bd4f5fb3f412657ee99f77ca)
    fn get_value(&self) -> c_int {
        unsafe { ffi::wxSlider_GetValue(self.as_ptr()) }
    }
    /// Sets the line size for the slider.
    ///
    /// [See `wxSlider::SetLineSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_slider.html#a4a595e045a2f7edb10b92ac9613159a1)
    fn set_line_size(&self, line_size: c_int) {
        unsafe { ffi::wxSlider_SetLineSize(self.as_ptr(), line_size) }
    }
    /// Sets the minimum slider value.
    ///
    /// [See `wxSlider::SetMin()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_slider.html#a09384d39ac2a0b17b38e496a4cb352f8)
    fn set_min(&self, min_value: c_int) {
        unsafe { ffi::wxSlider_SetMin(self.as_ptr(), min_value) }
    }
    /// Sets the maximum slider value.
    ///
    /// [See `wxSlider::SetMax()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_slider.html#a051289e2e696692e8d57c2b1ccb79b70)
    fn set_max(&self, max_value: c_int) {
        unsafe { ffi::wxSlider_SetMax(self.as_ptr(), max_value) }
    }
    /// Sets the page size for the slider.
    ///
    /// [See `wxSlider::SetPageSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_slider.html#ac8511076503048ba8566446c58b5900d)
    fn set_page_size(&self, page_size: c_int) {
        unsafe { ffi::wxSlider_SetPageSize(self.as_ptr(), page_size) }
    }
    /// Sets the minimum and maximum slider values.
    ///
    /// [See `wxSlider::SetRange()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_slider.html#ac2eecc23851213793d4045e0470eb3de)
    fn set_range(&self, min_value: c_int, max_value: c_int) {
        unsafe { ffi::wxSlider_SetRange(self.as_ptr(), min_value, max_value) }
    }
    /// Sets the selection.
    ///
    /// [See `wxSlider::SetSelection()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_slider.html#a3477bd700151d3c04e42ae53311a18f0)
    fn set_selection(&self, start_pos: c_int, end_pos: c_int) {
        unsafe { ffi::wxSlider_SetSelection(self.as_ptr(), start_pos, end_pos) }
    }
    /// Sets the slider thumb length.
    ///
    /// [See `wxSlider::SetThumbLength()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_slider.html#a2b093450d2e09568f12b92b4a2ec8b74)
    fn set_thumb_length(&self, len: c_int) {
        unsafe { ffi::wxSlider_SetThumbLength(self.as_ptr(), len) }
    }
    /// Sets a tick position.
    ///
    /// [See `wxSlider::SetTick()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_slider.html#a247d55821e4a3cd1769b7c90e9d37438)
    fn set_tick(&self, tick_pos: c_int) {
        unsafe { ffi::wxSlider_SetTick(self.as_ptr(), tick_pos) }
    }
    /// Sets the tick mark frequency and position.
    ///
    /// [See `wxSlider::SetTickFreq()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_slider.html#ae22a14edec9cf2221a56cde42e21208a)
    fn set_tick_freq(&self, freq: c_int) {
        unsafe { ffi::wxSlider_SetTickFreq(self.as_ptr(), freq) }
    }
    /// Sets the slider position.
    ///
    /// [See `wxSlider::SetValue()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_slider.html#a8c9839893e1569bef990dd84567ea541)
    fn set_value(&self, value: c_int) {
        unsafe { ffi::wxSlider_SetValue(self.as_ptr(), value) }
    }
}

// wxSpinButton
/// This trait represents C++ [`wxSpinButton`](https://docs.wxwidgets.org/3.2/classwx_spin_button.html) class's methods and inheritance.
///
/// See [`SpinButtonIsOwned`] documentation for the class usage.
pub trait SpinButtonMethods: ControlMethods {
    // DTOR: fn ~wxSpinButton()
    /// Get the value for increment for a spin control.
    ///
    /// [See `wxSpinButton::GetIncrement()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_button.html#aa2c16ea7b0246f4c6701db3456a8ae3e)
    fn get_increment(&self) -> c_int {
        unsafe { ffi::wxSpinButton_GetIncrement(self.as_ptr()) }
    }
    /// Returns the maximum permissible value.
    ///
    /// [See `wxSpinButton::GetMax()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_button.html#a12db858f3a16d88b41dacde32b266b62)
    fn get_max(&self) -> c_int {
        unsafe { ffi::wxSpinButton_GetMax(self.as_ptr()) }
    }
    /// Returns the minimum permissible value.
    ///
    /// [See `wxSpinButton::GetMin()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_button.html#ae231960c61b50f766650a9bab0d438b9)
    fn get_min(&self) -> c_int {
        unsafe { ffi::wxSpinButton_GetMin(self.as_ptr()) }
    }
    /// Returns the current spin button value.
    ///
    /// [See `wxSpinButton::GetValue()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_button.html#aba03919fd59eb41d1d63266d60dce2e3)
    fn get_value(&self) -> c_int {
        unsafe { ffi::wxSpinButton_GetValue(self.as_ptr()) }
    }
    /// Sets the increment for the control.
    ///
    /// [See `wxSpinButton::SetIncrement()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_button.html#a2416195486fba704ed6c31a112bc4c4f)
    fn set_increment(&self, value: c_int) {
        unsafe { ffi::wxSpinButton_SetIncrement(self.as_ptr(), value) }
    }
    /// Sets the range of the spin button.
    ///
    /// [See `wxSpinButton::SetRange()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_button.html#a97ec0d9a2f90067fa359b5be9736275f)
    fn set_range(&self, min: c_int, max: c_int) {
        unsafe { ffi::wxSpinButton_SetRange(self.as_ptr(), min, max) }
    }
    /// Sets the value of the spin button.
    ///
    /// [See `wxSpinButton::SetValue()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_button.html#ab45e4a9bffcc5e6bc542148d1dd587d4)
    fn set_value(&self, value: c_int) {
        unsafe { ffi::wxSpinButton_SetValue(self.as_ptr(), value) }
    }
}

// wxSpinCtrl
/// This trait represents C++ [`wxSpinCtrl`](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl.html) class's methods and inheritance.
///
/// See [`SpinCtrlIsOwned`] documentation for the class usage.
pub trait SpinCtrlMethods: ControlMethods {
    /// Creation function called by the spin control constructor.
    ///
    /// [See `wxSpinCtrl::Create()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl.html#ab81a6a6765d13d269f78ae00ea0a7ca4)
    fn create_str<W: WindowMethods, P: PointMethods, S: SizeMethods>(
        &self,
        parent: Option<&W>,
        id: c_int,
        value: &str,
        pos: &P,
        size: &S,
        style: c_long,
        min: c_int,
        max: c_int,
        initial: c_int,
        name: &str,
    ) -> bool {
        unsafe {
            let parent = match parent {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let value = WxString::from(value);
            let value = value.as_ptr();
            let pos = pos.as_ptr();
            let size = size.as_ptr();
            let name = WxString::from(name);
            let name = name.as_ptr();
            ffi::wxSpinCtrl_Create(
                self.as_ptr(),
                parent,
                id,
                value,
                pos,
                size,
                style,
                min,
                max,
                initial,
                name,
            )
        }
    }
    /// Returns the numerical base being currently used, 10 by default.
    ///
    /// [See `wxSpinCtrl::GetBase()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl.html#aa0d15b0972b568dd866bc3aad781675b)
    fn get_base(&self) -> c_int {
        unsafe { ffi::wxSpinCtrl_GetBase(self.as_ptr()) }
    }
    /// Gets maximal allowable value.
    ///
    /// [See `wxSpinCtrl::GetMax()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl.html#a4cd6589df2a74cc1d5bfc4beb80004d6)
    fn get_max(&self) -> c_int {
        unsafe { ffi::wxSpinCtrl_GetMax(self.as_ptr()) }
    }
    /// Gets minimal allowable value.
    ///
    /// [See `wxSpinCtrl::GetMin()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl.html#aea5251458d11a4c6a8508aea736e6350)
    fn get_min(&self) -> c_int {
        unsafe { ffi::wxSpinCtrl_GetMin(self.as_ptr()) }
    }
    /// Returns the text in the text entry part of the control.
    ///
    /// [See `wxSpinCtrl::GetTextValue()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl.html#a17f12115a3492e6467c74d156846530e)
    fn get_text_value(&self) -> String {
        unsafe { WxString::from_ptr(ffi::wxSpinCtrl_GetTextValue(self.as_ptr())).into() }
    }
    /// Gets the value of the spin control.
    ///
    /// [See `wxSpinCtrl::GetValue()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl.html#aa8ec6e624432bf37b0172a15a913f015)
    fn get_value(&self) -> c_int {
        unsafe { ffi::wxSpinCtrl_GetValue(self.as_ptr()) }
    }
    /// Get the value for increment for a spin control.
    ///
    /// [See `wxSpinCtrl::GetIncrement()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl.html#acc3fd5019913f6cad352aec6eb74e82a)
    fn get_increment(&self) -> c_int {
        unsafe { ffi::wxSpinCtrl_GetIncrement(self.as_ptr()) }
    }
    /// Sets the base to use for the numbers in this control.
    ///
    /// [See `wxSpinCtrl::SetBase()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl.html#af02b12c3d75a1ea24cbcfb9580d51eb8)
    fn set_base(&self, base: c_int) -> bool {
        unsafe { ffi::wxSpinCtrl_SetBase(self.as_ptr(), base) }
    }
    /// Sets range of allowable values.
    ///
    /// [See `wxSpinCtrl::SetRange()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl.html#ab2b5d966f0895c5cc4d54a9cfd1817dd)
    fn set_range(&self, min_val: c_int, max_val: c_int) {
        unsafe { ffi::wxSpinCtrl_SetRange(self.as_ptr(), min_val, max_val) }
    }
    /// Select the text in the text part of the control between positions from (inclusive) and to (exclusive).
    ///
    /// [See `wxSpinCtrl::SetSelection()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl.html#a2dbe44ee75161f54840339a2d340a6eb)
    fn set_selection(&self, from: c_long, to: c_long) {
        unsafe { ffi::wxSpinCtrl_SetSelection(self.as_ptr(), from, to) }
    }
    /// Sets the value of the spin control.
    ///
    /// [See `wxSpinCtrl::SetValue()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl.html#a1e60208c58820d18cd5b5df3bf91d414)
    fn set_value_str(&self, text: &str) {
        unsafe {
            let text = WxString::from(text);
            let text = text.as_ptr();
            ffi::wxSpinCtrl_SetValue(self.as_ptr(), text)
        }
    }
    /// Sets the value of the spin control.
    ///
    /// [See `wxSpinCtrl::SetValue()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl.html#a523f4c9064dfc399bc7dae67d5d6da59)
    fn set_value_int(&self, value: c_int) {
        unsafe { ffi::wxSpinCtrl_SetValue1(self.as_ptr(), value) }
    }
    /// Sets the increment for the control.
    ///
    /// [See `wxSpinCtrl::SetIncrement()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl.html#a5e937d934546ee3c24f1ff2a26888433)
    fn set_increment(&self, value: c_int) {
        unsafe { ffi::wxSpinCtrl_SetIncrement(self.as_ptr(), value) }
    }
}

// wxSpinCtrlDouble
/// This trait represents C++ [`wxSpinCtrlDouble`](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl_double.html) class's methods and inheritance.
///
/// See [`SpinCtrlDoubleIsOwned`] documentation for the class usage.
pub trait SpinCtrlDoubleMethods: ControlMethods {
    /// Creation function called by the spin control constructor.
    ///
    /// [See `wxSpinCtrlDouble::Create()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl_double.html#ad0b6bcc46608a96f6012e6d5777108b4)
    fn create_str<W: WindowMethods, P: PointMethods, S: SizeMethods>(
        &self,
        parent: Option<&W>,
        id: c_int,
        value: &str,
        pos: &P,
        size: &S,
        style: c_long,
        min: c_double,
        max: c_double,
        initial: c_double,
        inc: c_double,
        name: &str,
    ) -> bool {
        unsafe {
            let parent = match parent {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let value = WxString::from(value);
            let value = value.as_ptr();
            let pos = pos.as_ptr();
            let size = size.as_ptr();
            let name = WxString::from(name);
            let name = name.as_ptr();
            ffi::wxSpinCtrlDouble_Create(
                self.as_ptr(),
                parent,
                id,
                value,
                pos,
                size,
                style,
                min,
                max,
                initial,
                inc,
                name,
            )
        }
    }
    /// Gets precision of the value of the spin control.
    ///
    /// [See `wxSpinCtrlDouble::GetDigits()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl_double.html#aa2d3a8b8181d58c896de103081463fc6)
    fn get_digits(&self) -> c_uint {
        unsafe { ffi::wxSpinCtrlDouble_GetDigits(self.as_ptr()) }
    }
    /// Gets the increment value.
    ///
    /// [See `wxSpinCtrlDouble::GetIncrement()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl_double.html#aa2e0f929561eae875357fa3b4c2001ce)
    fn get_increment(&self) -> c_double {
        unsafe { ffi::wxSpinCtrlDouble_GetIncrement(self.as_ptr()) }
    }
    /// Gets maximal allowable value.
    ///
    /// [See `wxSpinCtrlDouble::GetMax()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl_double.html#a6c05f6b3c33a89232a089402f5f50376)
    fn get_max(&self) -> c_double {
        unsafe { ffi::wxSpinCtrlDouble_GetMax(self.as_ptr()) }
    }
    /// Gets minimal allowable value.
    ///
    /// [See `wxSpinCtrlDouble::GetMin()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl_double.html#ad36c8da3f4d329b4ded8e8a327f55867)
    fn get_min(&self) -> c_double {
        unsafe { ffi::wxSpinCtrlDouble_GetMin(self.as_ptr()) }
    }
    /// Returns the text in the text entry part of the control.
    ///
    /// [See `wxSpinCtrlDouble::GetTextValue()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl_double.html#a4ff3b69765573d288ddc35787e0c0b52)
    fn get_text_value(&self) -> String {
        unsafe { WxString::from_ptr(ffi::wxSpinCtrlDouble_GetTextValue(self.as_ptr())).into() }
    }
    /// Gets the value of the spin control.
    ///
    /// [See `wxSpinCtrlDouble::GetValue()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl_double.html#a3e281ad90b9dfdd1aa30c6bd6e347860)
    fn get_value(&self) -> c_double {
        unsafe { ffi::wxSpinCtrlDouble_GetValue(self.as_ptr()) }
    }
    /// Sets precision of the value of the spin control.
    ///
    /// [See `wxSpinCtrlDouble::SetDigits()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl_double.html#ad02d0141ca5dd9c3f9198f94bf200f8d)
    fn set_digits(&self, digits: c_uint) {
        unsafe { ffi::wxSpinCtrlDouble_SetDigits(self.as_ptr(), digits) }
    }
    /// Sets the increment value.
    ///
    /// [See `wxSpinCtrlDouble::SetIncrement()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl_double.html#a62d0ad51733a583cc77505119e4a4a60)
    fn set_increment(&self, inc: c_double) {
        unsafe { ffi::wxSpinCtrlDouble_SetIncrement(self.as_ptr(), inc) }
    }
    /// Sets range of allowable values.
    ///
    /// [See `wxSpinCtrlDouble::SetRange()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl_double.html#a63291b5549b6d64cc1efbb39b3025345)
    fn set_range(&self, min_val: c_double, max_val: c_double) {
        unsafe { ffi::wxSpinCtrlDouble_SetRange(self.as_ptr(), min_val, max_val) }
    }
    /// Sets the value of the spin control.
    ///
    /// [See `wxSpinCtrlDouble::SetValue()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl_double.html#a923aef4c509e78b0feba00e8cb181cab)
    fn set_value_str(&self, text: &str) {
        unsafe {
            let text = WxString::from(text);
            let text = text.as_ptr();
            ffi::wxSpinCtrlDouble_SetValue(self.as_ptr(), text)
        }
    }
    /// Sets the value of the spin control.
    ///
    /// [See `wxSpinCtrlDouble::SetValue()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_ctrl_double.html#a276b7ef27c55592b9ac894444d2653ec)
    fn set_value_double(&self, value: c_double) {
        unsafe { ffi::wxSpinCtrlDouble_SetValue1(self.as_ptr(), value) }
    }
}

// wxSpinDoubleEvent
/// This trait represents C++ [`wxSpinDoubleEvent`](https://docs.wxwidgets.org/3.2/classwx_spin_double_event.html) class's methods and inheritance.
///
/// See [`SpinDoubleEventIsOwned`] documentation for the class usage.
pub trait SpinDoubleEventMethods: NotifyEventMethods {
    /// Returns the value associated with this spin control event.
    ///
    /// [See `wxSpinDoubleEvent::GetValue()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_double_event.html#a847719d60b6922798e7e82b3c9b85552)
    fn get_value(&self) -> c_double {
        unsafe { ffi::wxSpinDoubleEvent_GetValue(self.as_ptr()) }
    }
    /// Set the value associated with the event.
    ///
    /// [See `wxSpinDoubleEvent::SetValue()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_double_event.html#a895122565354163e3160e0f9085032d0)
    fn set_value(&self, value: c_double) {
        unsafe { ffi::wxSpinDoubleEvent_SetValue(self.as_ptr(), value) }
    }
}

// wxSpinEvent
/// This trait represents C++ [`wxSpinEvent`](https://docs.wxwidgets.org/3.2/classwx_spin_event.html) class's methods and inheritance.
///
/// See [`SpinEventIsOwned`] documentation for the class usage.
pub trait SpinEventMethods: NotifyEventMethods {
    /// Retrieve the current spin button or control value.
    ///
    /// [See `wxSpinEvent::GetPosition()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_event.html#a0f9a620f1b77cdf13f17ae7e582e578f)
    fn get_position(&self) -> c_int {
        unsafe { ffi::wxSpinEvent_GetPosition(self.as_ptr()) }
    }
    /// Set the value associated with the event.
    ///
    /// [See `wxSpinEvent::SetPosition()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_spin_event.html#a85add17485df4a8b1ec0697b5cc0b026)
    fn set_position(&self, pos: c_int) {
        unsafe { ffi::wxSpinEvent_SetPosition(self.as_ptr(), pos) }
    }
}

// wxSplashScreen
/// This trait represents C++ [`wxSplashScreen`](https://docs.wxwidgets.org/3.2/classwx_splash_screen.html) class's methods and inheritance.
///
/// See [`SplashScreenIsOwned`] documentation for the class usage.
pub trait SplashScreenMethods: FrameMethods {
    // DTOR: fn ~wxSplashScreen()
    /// Returns the splash style (see wxSplashScreen() for details).
    ///
    /// [See `wxSplashScreen::GetSplashStyle()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splash_screen.html#ac58d1b4d1b2cf42b671b33400845cbed)
    fn get_splash_style(&self) -> c_long {
        unsafe { ffi::wxSplashScreen_GetSplashStyle(self.as_ptr()) }
    }
    /// Returns the window used to display the bitmap.
    ///
    /// [See `wxSplashScreen::GetSplashWindow()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splash_screen.html#a99c25eb43b2961ee80d138bf9fa4c327)
    fn get_splash_window(&self) -> *mut c_void {
        unsafe { ffi::wxSplashScreen_GetSplashWindow(self.as_ptr()) }
    }
    /// Returns the timeout in milliseconds.
    ///
    /// [See `wxSplashScreen::GetTimeout()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splash_screen.html#a78e7ac4a5db6edfa621e1f2e96295c30)
    fn get_timeout(&self) -> c_int {
        unsafe { ffi::wxSplashScreen_GetTimeout(self.as_ptr()) }
    }
    /// Reimplement this event handler if you want to set an application variable on window destruction, for example.
    ///
    /// [See `wxSplashScreen::OnCloseWindow()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splash_screen.html#a272f205e923e1db010c1e72b76f76286)
    fn on_close_window<C: CloseEventMethods>(&self, event: &C) {
        unsafe {
            let event = event.as_ptr();
            ffi::wxSplashScreen_OnCloseWindow(self.as_ptr(), event)
        }
    }
}

// wxSplitterEvent
/// This trait represents C++ [`wxSplitterEvent`](https://docs.wxwidgets.org/3.2/classwx_splitter_event.html) class's methods and inheritance.
///
/// See [`SplitterEventIsOwned`] documentation for the class usage.
pub trait SplitterEventMethods: NotifyEventMethods {
    /// Returns the new sash position.
    ///
    /// [See `wxSplitterEvent::GetSashPosition()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_event.html#a95ddc72c16bf362ccb030c6945ddb609)
    fn get_sash_position(&self) -> c_int {
        unsafe { ffi::wxSplitterEvent_GetSashPosition(self.as_ptr()) }
    }
    /// Returns a pointer to the window being removed when a splitter window is unsplit.
    ///
    /// [See `wxSplitterEvent::GetWindowBeingRemoved()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_event.html#a48449b0087d55a1e345070201ddd9451)
    fn get_window_being_removed(&self) -> WeakRef<Window> {
        unsafe {
            WeakRef::<Window>::from(ffi::wxSplitterEvent_GetWindowBeingRemoved(self.as_ptr()))
        }
    }
    /// Returns the x coordinate of the double-click point.
    ///
    /// [See `wxSplitterEvent::GetX()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_event.html#a479fa5172cdb88875403fbd53b93decf)
    fn get_x(&self) -> c_int {
        unsafe { ffi::wxSplitterEvent_GetX(self.as_ptr()) }
    }
    /// Returns the y coordinate of the double-click point.
    ///
    /// [See `wxSplitterEvent::GetY()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_event.html#acd259965fc97295ec121adbfe95ef70e)
    fn get_y(&self) -> c_int {
        unsafe { ffi::wxSplitterEvent_GetY(self.as_ptr()) }
    }
    /// In the case of wxEVT_SPLITTER_SASH_POS_CHANGED events, sets the new sash position.
    ///
    /// [See `wxSplitterEvent::SetSashPosition()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_event.html#a477c99aaf92b0d7ab36d6e71c42f323a)
    fn set_sash_position(&self, pos: c_int) {
        unsafe { ffi::wxSplitterEvent_SetSashPosition(self.as_ptr(), pos) }
    }
    /// Sets the size values of the window size.
    ///
    /// [See `wxSplitterEvent::SetSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_event.html#adc9eeed091a7cf9136e7f20e0420a846)
    fn set_size(&self, old_size: c_int, new_size: c_int) {
        unsafe { ffi::wxSplitterEvent_SetSize(self.as_ptr(), old_size, new_size) }
    }
    /// Returns the old size before the update.
    ///
    /// [See `wxSplitterEvent::GetOldSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_event.html#a0efcb0489c788d03232e094ba7488afb)
    fn get_old_size(&self) -> c_int {
        unsafe { ffi::wxSplitterEvent_GetOldSize(self.as_ptr()) }
    }
}

// wxSplitterWindow
/// This trait represents C++ [`wxSplitterWindow`](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html) class's methods and inheritance.
///
/// See [`SplitterWindowIsOwned`] documentation for the class usage.
pub trait SplitterWindowMethods: WindowMethods {
    // DTOR: fn ~wxSplitterWindow()
    /// Returns the current minimum pane size (defaults to zero).
    ///
    /// [See `wxSplitterWindow::GetMinimumPaneSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html#a2df0adb0fc4c01ea89cfedf72015e9dd)
    fn get_minimum_pane_size(&self) -> c_int {
        unsafe { ffi::wxSplitterWindow_GetMinimumPaneSize(self.as_ptr()) }
    }
    /// Returns the current sash gravity.
    ///
    /// [See `wxSplitterWindow::GetSashGravity()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html#aa3ba36d4c12bfe083757336457da2201)
    fn get_sash_gravity(&self) -> c_double {
        unsafe { ffi::wxSplitterWindow_GetSashGravity(self.as_ptr()) }
    }
    /// Returns the current sash position.
    ///
    /// [See `wxSplitterWindow::GetSashPosition()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html#aafbc47042965b0e82ff27471d9a9eb3a)
    fn get_sash_position(&self) -> c_int {
        unsafe { ffi::wxSplitterWindow_GetSashPosition(self.as_ptr()) }
    }
    /// Returns the default sash size in pixels or 0 if it is invisible.
    ///
    /// [See `wxSplitterWindow::GetSashSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html#a7b2b54d3de09b90f670a9377f8792cd0)
    fn get_sash_size(&self) -> c_int {
        unsafe { ffi::wxSplitterWindow_GetSashSize(self.as_ptr()) }
    }
    /// Returns the default sash size in pixels.
    ///
    /// [See `wxSplitterWindow::GetDefaultSashSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html#afeab5ca2f0f39924f854260954fbd3b6)
    fn get_default_sash_size(&self) -> c_int {
        unsafe { ffi::wxSplitterWindow_GetDefaultSashSize(self.as_ptr()) }
    }
    // NOT_SUPPORTED: fn GetSplitMode()
    /// Returns the left/top or only pane.
    ///
    /// [See `wxSplitterWindow::GetWindow1()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html#a6cd3a01a6b53485729f0e396d6f7a40d)
    fn get_window1(&self) -> WeakRef<Window> {
        unsafe { WeakRef::<Window>::from(ffi::wxSplitterWindow_GetWindow1(self.as_ptr())) }
    }
    /// Returns the right/bottom pane.
    ///
    /// [See `wxSplitterWindow::GetWindow2()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html#ab6c030494697baf2dcf2e3dfaa38009c)
    fn get_window2(&self) -> WeakRef<Window> {
        unsafe { WeakRef::<Window>::from(ffi::wxSplitterWindow_GetWindow2(self.as_ptr())) }
    }
    /// Initializes the splitter window to have one pane.
    ///
    /// [See `wxSplitterWindow::Initialize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html#a7b54aa365c98375c562a7fbc3f4e715f)
    fn initialize<W: WindowMethods>(&self, window: Option<&W>) {
        unsafe {
            let window = match window {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSplitterWindow_Initialize(self.as_ptr(), window)
        }
    }
    /// Returns true if the sash is invisible even when the window is split, false otherwise.
    ///
    /// [See `wxSplitterWindow::IsSashInvisible()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html#aa80bb422e9c635b690bfb345161935f0)
    fn is_sash_invisible(&self) -> bool {
        unsafe { ffi::wxSplitterWindow_IsSashInvisible(self.as_ptr()) }
    }
    /// Returns true if the window is split, false otherwise.
    ///
    /// [See `wxSplitterWindow::IsSplit()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html#abd8dd5867ec53e079e5003ac0a32b9c8)
    fn is_split(&self) -> bool {
        unsafe { ffi::wxSplitterWindow_IsSplit(self.as_ptr()) }
    }
    /// Application-overridable function called when the sash is double-clicked with the left mouse button.
    ///
    /// [See `wxSplitterWindow::OnDoubleClickSash()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html#acd8600550847fd6424c6ba79a7ac833e)
    fn on_double_click_sash(&self, x: c_int, y: c_int) {
        unsafe { ffi::wxSplitterWindow_OnDoubleClickSash(self.as_ptr(), x, y) }
    }
    /// Application-overridable function called when the sash position is changed by user.
    ///
    /// [See `wxSplitterWindow::OnSashPositionChange()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html#ad0c6a75e2f9635f9e3651cb01f6fc530)
    fn on_sash_position_change(&self, new_sash_position: c_int) -> bool {
        unsafe { ffi::wxSplitterWindow_OnSashPositionChange(self.as_ptr(), new_sash_position) }
    }
    /// Application-overridable function called when the window is unsplit, either programmatically or using the wxSplitterWindow user interface.
    ///
    /// [See `wxSplitterWindow::OnUnsplit()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html#a6ff1d9cf73ded27ff0de8fd608106659)
    fn on_unsplit<W: WindowMethods>(&self, removed: Option<&W>) {
        unsafe {
            let removed = match removed {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSplitterWindow_OnUnsplit(self.as_ptr(), removed)
        }
    }
    /// This function replaces one of the windows managed by the wxSplitterWindow with another one.
    ///
    /// [See `wxSplitterWindow::ReplaceWindow()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html#af85847a7899f8f4bf9a28b7e2ebee357)
    fn replace_window<W: WindowMethods, W2: WindowMethods>(
        &self,
        win_old: Option<&W>,
        win_new: Option<&W2>,
    ) -> bool {
        unsafe {
            let win_old = match win_old {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let win_new = match win_new {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSplitterWindow_ReplaceWindow(self.as_ptr(), win_old, win_new)
        }
    }
    /// Sets the minimum pane size.
    ///
    /// [See `wxSplitterWindow::SetMinimumPaneSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html#a84820036d00f751f5a2284ab4bc9ef22)
    fn set_minimum_pane_size(&self, pane_size: c_int) {
        unsafe { ffi::wxSplitterWindow_SetMinimumPaneSize(self.as_ptr(), pane_size) }
    }
    /// Sets the sash gravity.
    ///
    /// [See `wxSplitterWindow::SetSashGravity()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html#a3c52925dffd02509d110086d4bb29373)
    fn set_sash_gravity(&self, gravity: c_double) {
        unsafe { ffi::wxSplitterWindow_SetSashGravity(self.as_ptr(), gravity) }
    }
    /// Sets the sash position.
    ///
    /// [See `wxSplitterWindow::SetSashPosition()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html#ac109c071995913871c8669cb05186f7a)
    fn set_sash_position(&self, position: c_int, redraw: bool) {
        unsafe { ffi::wxSplitterWindow_SetSashPosition(self.as_ptr(), position, redraw) }
    }
    /// Sets the split mode.
    ///
    /// [See `wxSplitterWindow::SetSplitMode()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html#a92c912e2e7b656c8f906aaff89e1a0ec)
    fn set_split_mode(&self, mode: c_int) {
        unsafe { ffi::wxSplitterWindow_SetSplitMode(self.as_ptr(), mode) }
    }
    /// Sets whether the sash should be invisible, even when the window is split.
    ///
    /// [See `wxSplitterWindow::SetSashInvisible()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html#a3e140b4e8e73ff55aaf3b055f007c269)
    fn set_sash_invisible(&self, invisible: bool) {
        unsafe { ffi::wxSplitterWindow_SetSashInvisible(self.as_ptr(), invisible) }
    }
    /// Initializes the top and bottom panes of the splitter window.
    ///
    /// [See `wxSplitterWindow::SplitHorizontally()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html#a27f942a5849311e4800cabfdc1e781db)
    fn split_horizontally<W: WindowMethods, W2: WindowMethods>(
        &self,
        window1: Option<&W>,
        window2: Option<&W2>,
        sash_position: c_int,
    ) -> bool {
        unsafe {
            let window1 = match window1 {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let window2 = match window2 {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSplitterWindow_SplitHorizontally(self.as_ptr(), window1, window2, sash_position)
        }
    }
    /// Initializes the left and right panes of the splitter window.
    ///
    /// [See `wxSplitterWindow::SplitVertically()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html#a3003054271e61737e914b365e3a233b4)
    fn split_vertically<W: WindowMethods, W2: WindowMethods>(
        &self,
        window1: Option<&W>,
        window2: Option<&W2>,
        sash_position: c_int,
    ) -> bool {
        unsafe {
            let window1 = match window1 {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let window2 = match window2 {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSplitterWindow_SplitVertically(self.as_ptr(), window1, window2, sash_position)
        }
    }
    /// Unsplits the window.
    ///
    /// [See `wxSplitterWindow::Unsplit()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html#a8802da28267a6bb4eb6610f6abca2fc3)
    fn unsplit<W: WindowMethods>(&self, to_remove: Option<&W>) -> bool {
        unsafe {
            let to_remove = match to_remove {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxSplitterWindow_Unsplit(self.as_ptr(), to_remove)
        }
    }
    /// Causes any pending sizing of the sash and child panes to take place immediately.
    ///
    /// [See `wxSplitterWindow::UpdateSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_splitter_window.html#af7f3511718dfbfc2b4f36a202a436ff5)
    fn update_size(&self) {
        unsafe { ffi::wxSplitterWindow_UpdateSize(self.as_ptr()) }
    }
}

// wxStaticBitmap
/// This trait represents C++ [`wxStaticBitmap`](https://docs.wxwidgets.org/3.2/classwx_static_bitmap.html) class's methods and inheritance.
///
/// See [`StaticBitmapIsOwned`] documentation for the class usage.
pub trait StaticBitmapMethods: ControlMethods {
    /// Creation function, for two-step construction.
    ///
    /// [See `wxStaticBitmap::Create()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_static_bitmap.html#a8038c13d822b4952874f3f0e0071882c)
    fn create_bitmapbundle<
        W: WindowMethods,
        B: BitmapBundleMethods,
        P: PointMethods,
        S: SizeMethods,
    >(
        &self,
        parent: Option<&W>,
        id: c_int,
        label: &B,
        pos: &P,
        size: &S,
        style: c_long,
        name: &str,
    ) -> bool {
        unsafe {
            let parent = match parent {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let label = label.as_ptr();
            let pos = pos.as_ptr();
            let size = size.as_ptr();
            let name = WxString::from(name);
            let name = name.as_ptr();
            ffi::wxStaticBitmap_Create(self.as_ptr(), parent, id, label, pos, size, style, name)
        }
    }
    /// Returns the bitmap currently used in the control.
    ///
    /// [See `wxStaticBitmap::GetBitmap()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_static_bitmap.html#a52cde76ea6ea37ea9bda68927587b0f5)
    fn get_bitmap(&self) -> Bitmap {
        unsafe { Bitmap::from_ptr(ffi::wxStaticBitmap_GetBitmap(self.as_ptr())) }
    }
    /// Returns the icon currently used in the control.
    ///
    /// [See `wxStaticBitmap::GetIcon()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_static_bitmap.html#a571e9d819a57a9ec4a19e564a6a07884)
    fn get_icon(&self) -> Icon {
        unsafe { Icon::from_ptr(ffi::wxStaticBitmap_GetIcon(self.as_ptr())) }
    }
    /// Sets the bitmap label.
    ///
    /// [See `wxStaticBitmap::SetBitmap()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_static_bitmap.html#ab612471da048963c7dae8942de29aef6)
    fn set_bitmap<B: BitmapBundleMethods>(&self, label: &B) {
        unsafe {
            let label = label.as_ptr();
            ffi::wxStaticBitmap_SetBitmap(self.as_ptr(), label)
        }
    }
    /// Sets the label to the given icon.
    ///
    /// [See `wxStaticBitmap::SetIcon()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_static_bitmap.html#a1da7ae674f69e34293f00c610014d62a)
    fn set_icon<I: IconMethods>(&self, label: &I) {
        unsafe {
            let label = label.as_ptr();
            ffi::wxStaticBitmap_SetIcon(self.as_ptr(), label)
        }
    }
    // NOT_SUPPORTED: fn SetScaleMode()
    // NOT_SUPPORTED: fn GetScaleMode()
}

// wxStaticBox
/// This trait represents C++ [`wxStaticBox`](https://docs.wxwidgets.org/3.2/classwx_static_box.html) class's methods and inheritance.
///
/// See [`StaticBoxIsOwned`] documentation for the class usage.
pub trait StaticBoxMethods: ControlMethods {
    // DTOR: fn ~wxStaticBox()
    /// Creates the static box for two-step construction.
    ///
    /// [See `wxStaticBox::Create()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_static_box.html#a67369167050464548e9ef0f791844f60)
    fn create_str<W: WindowMethods, P: PointMethods, S: SizeMethods>(
        &self,
        parent: Option<&W>,
        id: c_int,
        label: &str,
        pos: &P,
        size: &S,
        style: c_long,
        name: &str,
    ) -> bool {
        unsafe {
            let parent = match parent {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let label = WxString::from(label);
            let label = label.as_ptr();
            let pos = pos.as_ptr();
            let size = size.as_ptr();
            let name = WxString::from(name);
            let name = name.as_ptr();
            ffi::wxStaticBox_Create(self.as_ptr(), parent, id, label, pos, size, style, name)
        }
    }
    // BLOCKED: fn Create1()
}

// wxStaticBoxSizer
/// This trait represents C++ [`wxStaticBoxSizer`](https://docs.wxwidgets.org/3.2/classwx_static_box_sizer.html) class's methods and inheritance.
///
/// See [`StaticBoxSizerIsOwned`] documentation for the class usage.
pub trait StaticBoxSizerMethods: BoxSizerMethods {
    /// Returns the static box associated with the sizer.
    ///
    /// [See `wxStaticBoxSizer::GetStaticBox()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_static_box_sizer.html#abdb5c52c521c75519ae1b01c610e99d0)
    fn get_static_box(&self) -> WeakRef<StaticBox> {
        unsafe { WeakRef::<StaticBox>::from(ffi::wxStaticBoxSizer_GetStaticBox(self.as_ptr())) }
    }
}

// wxStaticLine
/// This trait represents C++ [`wxStaticLine`](https://docs.wxwidgets.org/3.2/classwx_static_line.html) class's methods and inheritance.
///
/// See [`StaticLineIsOwned`] documentation for the class usage.
pub trait StaticLineMethods: ControlMethods {
    /// Returns true if the line is vertical, false if horizontal.
    ///
    /// [See `wxStaticLine::IsVertical()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_static_line.html#a725bfe2dc29c7ee08a4e0b4ed97a7232)
    fn is_vertical(&self) -> bool {
        unsafe { ffi::wxStaticLine_IsVertical(self.as_ptr()) }
    }
    /// This static function returns the size which will be given to the smaller dimension of the static line, i.e.
    ///
    /// [See `wxStaticLine::GetDefaultSize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_static_line.html#a31f2bdc6395b7ad4ff5aa981a2d08909)
    fn get_default_size() -> c_int {
        unsafe { ffi::wxStaticLine_GetDefaultSize() }
    }
}

// wxStaticText
/// This trait represents C++ [`wxStaticText`](https://docs.wxwidgets.org/3.2/classwx_static_text.html) class's methods and inheritance.
///
/// See [`StaticTextIsOwned`] documentation for the class usage.
pub trait StaticTextMethods: ControlMethods {
    /// Creation function, for two-step construction.
    ///
    /// [See `wxStaticText::Create()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_static_text.html#a7586cfd05c97355bc19c3f553047c683)
    fn create_str<W: WindowMethods, P: PointMethods, S: SizeMethods>(
        &self,
        parent: Option<&W>,
        id: c_int,
        label: &str,
        pos: &P,
        size: &S,
        style: c_long,
        name: &str,
    ) -> bool {
        unsafe {
            let parent = match parent {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let label = WxString::from(label);
            let label = label.as_ptr();
            let pos = pos.as_ptr();
            let size = size.as_ptr();
            let name = WxString::from(name);
            let name = name.as_ptr();
            ffi::wxStaticText_Create(self.as_ptr(), parent, id, label, pos, size, style, name)
        }
    }
    /// Returns true if the window styles for this control contains one of the wxST_ELLIPSIZE_START, wxST_ELLIPSIZE_MIDDLE or wxST_ELLIPSIZE_END styles.
    ///
    /// [See `wxStaticText::IsEllipsized()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_static_text.html#aafb0a419b8288c550c07d5a34cba4ea1)
    fn is_ellipsized(&self) -> bool {
        unsafe { ffi::wxStaticText_IsEllipsized(self.as_ptr()) }
    }
    /// This functions wraps the controls label so that each of its lines becomes at most width pixels wide if possible (the lines are broken at words boundaries so it might not be the case if words are too long).
    ///
    /// [See `wxStaticText::Wrap()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_static_text.html#af997df62e849c890f0cac6900ee950f5)
    fn wrap(&self, width: c_int) {
        unsafe { ffi::wxStaticText_Wrap(self.as_ptr(), width) }
    }
}

// wxStatusBar
/// This trait represents C++ [`wxStatusBar`](https://docs.wxwidgets.org/3.2/classwx_status_bar.html) class's methods and inheritance.
///
/// See [`StatusBarIsOwned`] documentation for the class usage.
pub trait StatusBarMethods: ControlMethods {
    // DTOR: fn ~wxStatusBar()
    /// Creates the window, for two-step construction.
    ///
    /// [See `wxStatusBar::Create()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_status_bar.html#a3005b5912a5835f74773aa6235ef33f4)
    fn create_long<W: WindowMethods>(
        &self,
        parent: Option<&W>,
        id: c_int,
        style: c_long,
        name: &str,
    ) -> bool {
        unsafe {
            let parent = match parent {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            let name = WxString::from(name);
            let name = name.as_ptr();
            ffi::wxStatusBar_Create(self.as_ptr(), parent, id, style, name)
        }
    }
    /// Returns the size and position of a field's internal bounding rectangle.
    ///
    /// [See `wxStatusBar::GetFieldRect()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_status_bar.html#a345abe1c4bb5b7673fb464bee50a4d92)
    fn get_field_rect<R: RectMethods>(&self, i: c_int, rect: &R) -> bool {
        unsafe {
            let rect = rect.as_ptr();
            ffi::wxStatusBar_GetFieldRect(self.as_ptr(), i, rect)
        }
    }
    /// Returns the number of fields in the status bar.
    ///
    /// [See `wxStatusBar::GetFieldsCount()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_status_bar.html#a2dff7c9954fa782b758be8ee8fee1029)
    fn get_fields_count(&self) -> c_int {
        unsafe { ffi::wxStatusBar_GetFieldsCount(self.as_ptr()) }
    }
    /// Returns the wxStatusBarPane representing the n-th field.
    ///
    /// [See `wxStatusBar::GetField()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_status_bar.html#ad806c2744f1bf7fae7c986c384e601d8)
    fn get_field(&self, n: c_int) -> StatusBarPaneIsOwned<false> {
        unsafe { StatusBarPaneIsOwned::from_ptr(ffi::wxStatusBar_GetField(self.as_ptr(), n)) }
    }
    /// Returns the horizontal and vertical borders used when rendering the field text inside the field area.
    ///
    /// [See `wxStatusBar::GetBorders()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_status_bar.html#a14afcabbbbeb128caac0fb3e05456348)
    fn get_borders(&self) -> Size {
        unsafe { Size::from_ptr(ffi::wxStatusBar_GetBorders(self.as_ptr())) }
    }
    /// Returns the string associated with a status bar field.
    ///
    /// [See `wxStatusBar::GetStatusText()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_status_bar.html#abab36dabc921443a3d960c7389d79df6)
    fn get_status_text(&self, i: c_int) -> String {
        unsafe { WxString::from_ptr(ffi::wxStatusBar_GetStatusText(self.as_ptr(), i)).into() }
    }
    /// Returns the width of the n-th field.
    ///
    /// [See `wxStatusBar::GetStatusWidth()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_status_bar.html#a2f02e2e02d463d84bf610980ee66afa4)
    fn get_status_width(&self, n: c_int) -> c_int {
        unsafe { ffi::wxStatusBar_GetStatusWidth(self.as_ptr(), n) }
    }
    /// Returns the style of the n-th field.
    ///
    /// [See `wxStatusBar::GetStatusStyle()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_status_bar.html#ab3ba0a5e8426a89d0907189d15c28e75)
    fn get_status_style(&self, n: c_int) -> c_int {
        unsafe { ffi::wxStatusBar_GetStatusStyle(self.as_ptr(), n) }
    }
    /// Restores the text to the value it had before the last call to PushStatusText().
    ///
    /// [See `wxStatusBar::PopStatusText()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_status_bar.html#a222327877b1c698955e2cffeb80044c3)
    fn pop_status_text(&self, field: c_int) {
        unsafe { ffi::wxStatusBar_PopStatusText(self.as_ptr(), field) }
    }
    /// Saves the current field text in a per-field stack, and sets the field text to the string passed as argument.
    ///
    /// [See `wxStatusBar::PushStatusText()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_status_bar.html#a5e524ee9181b0cfd491a35bafcf50cf4)
    fn push_status_text(&self, string: &str, field: c_int) {
        unsafe {
            let string = WxString::from(string);
            let string = string.as_ptr();
            ffi::wxStatusBar_PushStatusText(self.as_ptr(), string, field)
        }
    }
    /// Sets the number of fields, and optionally the field widths.
    ///
    /// [See `wxStatusBar::SetFieldsCount()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_status_bar.html#a17355cdc7c13a2d82e942f383cbee66e)
    fn set_fields_count(&self, number: c_int, widths: *const c_void) {
        unsafe { ffi::wxStatusBar_SetFieldsCount(self.as_ptr(), number, widths) }
    }
    /// Sets the minimal possible height for the status bar.
    ///
    /// [See `wxStatusBar::SetMinHeight()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_status_bar.html#acb69383c70aef24eca682b3f748359f2)
    fn set_min_height(&self, height: c_int) {
        unsafe { ffi::wxStatusBar_SetMinHeight(self.as_ptr(), height) }
    }
    /// Sets the styles of the fields in the status line which can make fields appear flat or raised instead of the standard sunken 3D border.
    ///
    /// [See `wxStatusBar::SetStatusStyles()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_status_bar.html#a9b8d7edb05ff64d5feb1889f2e189537)
    fn set_status_styles(&self, n: c_int, styles: *const c_void) {
        unsafe { ffi::wxStatusBar_SetStatusStyles(self.as_ptr(), n, styles) }
    }
    /// Sets the status text for the i-th field.
    ///
    /// [See `wxStatusBar::SetStatusText()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_status_bar.html#a1f0fd75cce7f3f8c89c0b2f8b9b88dd1)
    fn set_status_text(&self, text: &str, i: c_int) {
        unsafe {
            let text = WxString::from(text);
            let text = text.as_ptr();
            ffi::wxStatusBar_SetStatusText(self.as_ptr(), text, i)
        }
    }
    /// Sets the widths of the fields in the status line.
    ///
    /// [See `wxStatusBar::SetStatusWidths()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_status_bar.html#a9abeb55a396c9ea4f0cea9fc06d124ee)
    fn set_status_widths(&self, n: c_int, widths_field: *const c_void) {
        unsafe { ffi::wxStatusBar_SetStatusWidths(self.as_ptr(), n, widths_field) }
    }
}

// wxStatusBarPane
/// This trait represents C++ [`wxStatusBarPane`](https://docs.wxwidgets.org/3.2/classwx_status_bar_pane.html) class's methods and inheritance.
///
/// See [`StatusBarPaneIsOwned`] documentation for the class usage.
pub trait StatusBarPaneMethods: WxRustMethods {
    /// Returns the pane width; it maybe negative, indicating a variable-width field.
    ///
    /// [See `wxStatusBarPane::GetWidth()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_status_bar_pane.html#aab7f589404f64c417120bf012c37eb38)
    fn get_width(&self) -> c_int {
        unsafe { ffi::wxStatusBarPane_GetWidth(self.as_ptr()) }
    }
    /// Returns the pane style.
    ///
    /// [See `wxStatusBarPane::GetStyle()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_status_bar_pane.html#acea303782875455cdaca7a010e17ca71)
    fn get_style(&self) -> c_int {
        unsafe { ffi::wxStatusBarPane_GetStyle(self.as_ptr()) }
    }
    /// Returns the text currently shown in this pane.
    ///
    /// [See `wxStatusBarPane::GetText()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_status_bar_pane.html#a28696d9735ac7e9528f342f6dc885c44)
    fn get_text(&self) -> String {
        unsafe { WxString::from_ptr(ffi::wxStatusBarPane_GetText(self.as_ptr())).into() }
    }
}

// wxStdDialogButtonSizer
/// This trait represents C++ [`wxStdDialogButtonSizer`](https://docs.wxwidgets.org/3.2/classwx_std_dialog_button_sizer.html) class's methods and inheritance.
///
/// See [`StdDialogButtonSizerIsOwned`] documentation for the class usage.
pub trait StdDialogButtonSizerMethods: BoxSizerMethods {
    /// Adds a button to the wxStdDialogButtonSizer.
    ///
    /// [See `wxStdDialogButtonSizer::AddButton()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_std_dialog_button_sizer.html#ad86379fdfdeeb02f77019ea9e1250688)
    fn add_button<B: ButtonMethods>(&self, button: Option<&B>) {
        unsafe {
            let button = match button {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxStdDialogButtonSizer_AddButton(self.as_ptr(), button)
        }
    }
    /// Rearranges the buttons and applies proper spacing between buttons to make them match the platform or toolkit's interface guidelines.
    ///
    /// [See `wxStdDialogButtonSizer::Realize()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_std_dialog_button_sizer.html#a6b84c3a59817dd4c1dbe22eec8951134)
    fn realize(&self) {
        unsafe { ffi::wxStdDialogButtonSizer_Realize(self.as_ptr()) }
    }
    /// Sets the affirmative button for the sizer.
    ///
    /// [See `wxStdDialogButtonSizer::SetAffirmativeButton()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_std_dialog_button_sizer.html#a523a7a8ffe4d45d35a6a9a6859978e0c)
    fn set_affirmative_button<B: ButtonMethods>(&self, button: Option<&B>) {
        unsafe {
            let button = match button {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxStdDialogButtonSizer_SetAffirmativeButton(self.as_ptr(), button)
        }
    }
    /// Sets the cancel button for the sizer.
    ///
    /// [See `wxStdDialogButtonSizer::SetCancelButton()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_std_dialog_button_sizer.html#afc8000cf3148cd7feb96a1a906e7ceed)
    fn set_cancel_button<B: ButtonMethods>(&self, button: Option<&B>) {
        unsafe {
            let button = match button {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxStdDialogButtonSizer_SetCancelButton(self.as_ptr(), button)
        }
    }
    /// Sets the negative button for the sizer.
    ///
    /// [See `wxStdDialogButtonSizer::SetNegativeButton()`'s original doc.](https://docs.wxwidgets.org/3.2/classwx_std_dialog_button_sizer.html#a2e3771a7f1b826a38f51f888210a5d85)
    fn set_negative_button<B: ButtonMethods>(&self, button: Option<&B>) {
        unsafe {
            let button = match button {
                Some(r) => r.as_ptr(),
                None => ptr::null_mut(),
            };
            ffi::wxStdDialogButtonSizer_SetNegativeButton(self.as_ptr(), button)
        }
    }
}

// wxStockPreferencesPage
/// This trait represents C++ [`wxStockPreferencesPage`](https://docs.wxwidgets.org/3.2/classwx_stock_preferences_page.html) class's methods and inheritance.
///
/// See [`StockPreferencesPageIsOwned`] documentation for the class usage.
pub trait StockPreferencesPageMethods: PreferencesPageMethods {
    // NOT_SUPPORTED: fn GetKind()
}

// wxSysColourChangedEvent
/// This trait represents C++ [`wxSysColourChangedEvent`](https://docs.wxwidgets.org/3.2/classwx_sys_colour_changed_event.html) class's methods and inheritance.
///
/// See [`SysColourChangedEventIsOwned`] documentation for the class usage.
pub trait SysColourChangedEventMethods: EventMethods {}

// wxSystemSettings
/// This trait represents C++ [`wxSystemSettings`](https://docs.wxwidgets.org/3.2/classwx_system_settings.html) class's methods and inheritance.
///
/// See [`SystemSettingsIsOwned`] documentation for the class usage.
pub trait SystemSettingsMethods: WxRustMethods {
    // NOT_SUPPORTED: fn GetColour()
    // NOT_SUPPORTED: fn GetFont()
    // NOT_SUPPORTED: fn GetMetric()
    // NOT_SUPPORTED: fn GetScreenType()
    // NOT_SUPPORTED: fn GetAppearance()
    // NOT_SUPPORTED: fn HasFeature()
}
