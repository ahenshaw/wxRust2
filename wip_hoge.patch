diff --git a/samples/widgets/src/button.rs b/samples/widgets/src/button.rs
index 46f0727..026b264 100644
--- a/samples/widgets/src/button.rs
+++ b/samples/widgets/src/button.rs
@@ -2,6 +2,7 @@ use std::os::raw::c_int;
 use wx::methods::*;
 
 // control ids
+#[derive(Clone, Copy)]
 enum ButtonPage {
     Reset = wx::ID_HIGHEST as isize,
     ChangeLabel,
@@ -9,6 +10,17 @@ enum ButtonPage {
     ChangeImageMargins,
     Button,
 }
+impl ButtonPage {
+    fn from(v: c_int) -> Option<Self> {
+        use ButtonPage::*;
+        for e in [Reset, ChangeLabel, ChangeNote, ChangeImageMargins, Button] {
+            if v == e.into() {
+                return Some(e);
+            }
+        }
+        return None;
+    }
+}
 impl From<ButtonPage> for c_int {
     fn from(w: ButtonPage) -> Self {
         w as c_int
@@ -34,6 +46,17 @@ impl ButtonWidgetsPage {
             m_sizer_button: None,
         }
     }
+
+    pub fn handle_button(&self, event: &wx::CommandEvent) {
+        println!("event={}", event.get_id());
+        if let Some(m) = ButtonPage::from(event.get_id()) {
+            match m {
+                ButtonPage::ChangeLabel => self.on_button_change_label(),
+                _ => (),
+            };
+        }
+    }
+
     pub fn create_content(&mut self) {
         let sizer_top = wx::BoxSizer::new(wx::HORIZONTAL);
 
@@ -195,7 +218,7 @@ impl ButtonWidgetsPage {
 
         // do create the main control
         self.reset();
-        // self.create_button();
+        self.create_button();
 
         self.base.set_sizer(Some(&sizer_top), true);
     }
@@ -299,4 +322,12 @@ impl ButtonWidgetsPage {
 
         return checkbox;
     }
+
+    fn on_button_change_label(&self) {
+        let label_text = self.m_text_label.as_ref().unwrap().get_value();
+
+        self.m_button.as_ref().unwrap().set_label(&label_text);
+
+        self.m_sizer_button.as_ref().unwrap().layout();
+    }
 }
diff --git a/samples/widgets/src/main.rs b/samples/widgets/src/main.rs
index 5093bf6..aaa94a5 100644
--- a/samples/widgets/src/main.rs
+++ b/samples/widgets/src/main.rs
@@ -114,6 +114,12 @@ impl WidgetsFrame {
             m_page: page,
         };
         frame.on_create();
+        let frame_copy = frame.clone();
+        frame
+            .base
+            .bind(wx::RustEvent::Button, move |event: &wx::CommandEvent| {
+                frame_copy.m_page.handle_button(event);
+            });
         frame
     }
     fn on_create(&mut self) {
@@ -248,15 +254,15 @@ impl WidgetsFrame {
             wx::BookCtrlBase::NO_IMAGE,
         );
 
-        let self_copy = self.clone();
-        self.base.bind(
-            wx::RustEvent::BookctrlPageChanged,
-            move |event: &wx::BookCtrlEvent| {
-                let mut warped = self_copy.clone();
-                let sel = event.get_selection();
-                warped.on_page_changed(sel);
-            },
-        );
+        // let self_copy = self.clone();
+        // self.base.bind(
+        //     wx::RustEvent::BookctrlPageChanged,
+        //     move |event: &wx::BookCtrlEvent| {
+        //         let mut warped = self_copy.clone();
+        //         let sel = event.get_selection();
+        //         warped.on_page_changed(sel);
+        //     },
+        // );
 
         // self.m_book.set_selection(1);
         // self.m_book.set_selection(0);
